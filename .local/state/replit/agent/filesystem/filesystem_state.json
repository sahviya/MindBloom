{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MindBloom - AI-Powered Wellness Application\n\n## Overview\n\nMindBloom is a comprehensive mental health and wellness web application that combines AI-powered support with community features, personal journaling, and curated content recommendations. The application serves as a digital companion for users seeking mental health support, providing personalized guidance through an AI assistant called \"Genie\" while fostering community connections and offering various wellness resources.\n\nThe platform integrates modern web technologies with AI capabilities to deliver a holistic wellness experience, including mood tracking, journaling, media recommendations, games, books, shopping therapy, and peer support through community features.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Theme System**: Custom theme provider supporting light/dark/system themes with CSS variables\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: OpenID Connect integration with Replit Auth for secure user authentication\n- **Session Management**: Express sessions with PostgreSQL session store\n- **API Design**: RESTful API endpoints with consistent error handling\n\n### Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Schema**: Comprehensive schema including users, journal entries, community posts, mood tracking, and AI conversations\n- **Relationships**: Proper foreign key relationships between users, posts, comments, and likes\n- **Session Storage**: Dedicated sessions table for authentication state management\n\n### AI Integration\n- **Provider**: Google Gemini AI (via @google/genai) for natural language processing\n- **Features**: Conversational AI companion with emotional support capabilities\n- **Response Format**: Structured JSON responses with tone classification and suggestions\n- **Context Awareness**: Conversation history tracking for personalized interactions\n\n### Authentication System\n- **Method**: OpenID Connect (OIDC) with Replit as identity provider\n- **Session Management**: Secure session cookies with PostgreSQL backing\n- **User Profile**: Comprehensive user profiles with customizable themes and preferences\n- **Authorization**: Route-level protection with middleware-based authentication checks\n\n### Data Models\n- **Users**: Profile information, preferences, theme settings, and authentication data\n- **Journal Entries**: Personal journal entries with mood tracking and content analysis\n- **Community Posts**: User-generated content with likes, comments, and engagement metrics\n- **Mood Tracking**: Daily mood entries with historical data for trend analysis\n- **AI Conversations**: Chat history with the AI companion for continuity\n\n### UI/UX Architecture\n- **Component Library**: Radix UI primitives with shadcn/ui styling for accessibility\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Navigation**: Sticky header with mobile-optimized navigation\n- **Theme System**: CSS custom properties for seamless theme switching\n- **Animations**: Tailwind CSS animations with custom keyframes for enhanced user experience\n\n### Content Management\n- **Media Recommendations**: Curated lists of movies, music, and TED talks\n- **Games Integration**: External game links with categorization\n- **Books Library**: Free self-help resources with download links\n- **Shopping Integration**: Wellness-focused product recommendations with external links\n\n### Performance Optimizations\n- **Caching**: TanStack Query for intelligent data caching and background updates\n- **Bundle Optimization**: Vite with code splitting and tree shaking\n- **Asset Management**: Optimized static asset serving with proper cache headers\n- **Database Optimization**: Indexed queries with efficient relationship loading\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: PostgreSQL via Neon Database (@neondatabase/serverless)\n- **Authentication**: Replit OpenID Connect service\n- **AI Services**: Google Gemini AI API for conversational intelligence\n\n### Frontend Dependencies\n- **UI Components**: Radix UI primitives for accessible component foundation\n- **Styling**: Tailwind CSS for utility-first styling approach\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Icons**: Font Awesome 6 for comprehensive icon library\n- **Fonts**: Google Fonts (Playfair Display, Inter) for typography\n\n### Backend Dependencies\n- **Web Framework**: Express.js with TypeScript support\n- **Database ORM**: Drizzle with migration support\n- **Session Storage**: connect-pg-simple for PostgreSQL session management\n- **Validation**: Zod for runtime type validation\n\n### Development Tools\n- **Build System**: Vite with React plugin and hot module replacement\n- **TypeScript**: Full-stack type safety with strict configuration\n- **Package Management**: npm with lockfile for dependency consistency\n- **Environment**: Replit-specific plugins for development environment integration\n\n### Third-Party Integrations\n- **Media Content**: YouTube and Spotify embed integration for media recommendations\n- **E-commerce**: Amazon affiliate links for wellness product recommendations\n- **External Resources**: Project Gutenberg and Internet Archive for free book access\n- **Game Platforms**: Links to web-based games and wellness applications\n\n### Security Dependencies\n- **Session Security**: Secure session configuration with HTTP-only cookies\n- **CORS**: Express CORS middleware for cross-origin request handling\n- **Environment Variables**: Secure API key and database URL management\n- **Input Validation**: Zod schemas for request validation and sanitization","size_bytes":6281},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_AI_API_KEY || \"\" });\n\nexport interface GenieResponse {\n  message: string;\n  tone: \"supportive\" | \"encouraging\" | \"empathetic\" | \"motivational\";\n  suggestions?: string[];\n}\n\nexport async function chatWithGenie(userMessage: string, context?: string): Promise<GenieResponse> {\n  try {\n    const systemPrompt = `You are a supportive AI companion called \"Ur Genie\" in the MindBloom wellness app. \n    You embody the wisdom and magical support of a caring genie friend. Your role is to:\n    \n    - Provide empathetic, supportive responses to users sharing their thoughts and feelings\n    - Offer gentle encouragement and practical wellness suggestions\n    - Use magical, mystical language occasionally but keep it natural and helpful\n    - Be warm, understanding, and non-judgmental\n    - Suggest breathing exercises, mindfulness practices, or positive activities when appropriate\n    - Keep responses concise but meaningful (2-4 sentences)\n    - Use emojis sparingly and appropriately\n    \n    Respond with JSON in this format:\n    {\n      \"message\": \"Your supportive response\",\n      \"tone\": \"supportive|encouraging|empathetic|motivational\",\n      \"suggestions\": [\"optional array of helpful suggestions\"]\n    }`;\n\n    const contextualPrompt = context \n      ? `Previous context: ${context}\\n\\nUser message: ${userMessage}`\n      : `User message: ${userMessage}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            message: { type: \"string\" },\n            tone: { type: \"string\", enum: [\"supportive\", \"encouraging\", \"empathetic\", \"motivational\"] },\n            suggestions: { \n              type: \"array\", \n              items: { type: \"string\" }\n            },\n          },\n          required: [\"message\", \"tone\"],\n        },\n      },\n      contents: contextualPrompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const data: GenieResponse = JSON.parse(rawJson);\n      return data;\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    console.error(\"Error in chatWithGenie:\", error);\n    return {\n      message: \"I'm here to support you, though I'm having a magical moment of silence right now. How are you feeling today? ✨\",\n      tone: \"supportive\"\n    };\n  }\n}\n\nexport async function analyzeMoodFromText(text: string): Promise<{ mood: string; confidence: number; insights: string[] }> {\n  try {\n    const systemPrompt = `Analyze the emotional tone and mood from the given text.\n    Determine the primary mood and provide insights.\n    \n    Respond with JSON in this format:\n    {\n      \"mood\": \"very_happy|happy|neutral|sad|very_sad\",\n      \"confidence\": 0.0-1.0,\n      \"insights\": [\"array of emotional insights\"]\n    }`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            mood: { type: \"string\", enum: [\"very_happy\", \"happy\", \"neutral\", \"sad\", \"very_sad\"] },\n            confidence: { type: \"number\" },\n            insights: { \n              type: \"array\", \n              items: { type: \"string\" }\n            },\n          },\n          required: [\"mood\", \"confidence\", \"insights\"],\n        },\n      },\n      contents: text,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      return JSON.parse(rawJson);\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    console.error(\"Error in analyzeMoodFromText:\", error);\n    return {\n      mood: \"neutral\",\n      confidence: 0.5,\n      insights: [\"Unable to analyze mood at this time\"]\n    };\n  }\n}\n\nexport async function generateMotivationalQuote(): Promise<{ quote: string; author: string; theme: string }> {\n  try {\n    const systemPrompt = `Generate an inspiring, uplifting motivational quote.\n    The quote should be positive, encouraging, and suitable for a wellness app.\n    \n    Respond with JSON in this format:\n    {\n      \"quote\": \"The inspirational quote text\",\n      \"author\": \"Author name or 'Unknown' if original\",\n      \"theme\": \"Brief theme description\"\n    }`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            quote: { type: \"string\" },\n            author: { type: \"string\" },\n            theme: { type: \"string\" },\n          },\n          required: [\"quote\", \"author\", \"theme\"],\n        },\n      },\n      contents: \"Generate a motivational quote for today\",\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      return JSON.parse(rawJson);\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    console.error(\"Error in generateMotivationalQuote:\", error);\n    return {\n      quote: \"Every moment is a fresh beginning.\",\n      author: \"T.S. Eliot\",\n      theme: \"New beginnings\"\n    };\n  }\n}\n","size_bytes":5449},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { chatWithGenie, analyzeMoodFromText, generateMotivationalQuote } from \"./gemini\";\nimport { \n  insertJournalEntrySchema, \n  insertCommunityPostSchema, \n  insertPostCommentSchema,\n  insertMoodEntrySchema \n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User routes\n  app.patch('/api/user/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      \n      const updatedUser = await storage.upsertUser({\n        id: userId,\n        ...updates,\n      });\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Journal routes\n  app.get('/api/journal', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const entries = await storage.getJournalEntries(userId);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching journal entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch journal entries\" });\n    }\n  });\n\n  app.post('/api/journal', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const entryData = insertJournalEntrySchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      // Analyze mood from content\n      const moodAnalysis = await analyzeMoodFromText(entryData.content);\n      entryData.mood = moodAnalysis.mood;\n\n      const entry = await storage.createJournalEntry(entryData);\n      \n      // Also create a mood entry\n      await storage.createMoodEntry({\n        userId,\n        mood: moodAnalysis.mood,\n        notes: `From journal: ${entryData.title || 'Untitled entry'}`,\n      });\n\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error creating journal entry:\", error);\n      res.status(500).json({ message: \"Failed to create journal entry\" });\n    }\n  });\n\n  app.patch('/api/journal/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const entryId = req.params.id;\n      const updates = req.body;\n\n      if (updates.content) {\n        const moodAnalysis = await analyzeMoodFromText(updates.content);\n        updates.mood = moodAnalysis.mood;\n      }\n\n      const entry = await storage.updateJournalEntry(entryId, userId, updates);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error updating journal entry:\", error);\n      res.status(500).json({ message: \"Failed to update journal entry\" });\n    }\n  });\n\n  app.delete('/api/journal/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const entryId = req.params.id;\n      \n      const success = await storage.deleteJournalEntry(entryId, userId);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error deleting journal entry:\", error);\n      res.status(500).json({ message: \"Failed to delete journal entry\" });\n    }\n  });\n\n  // Community routes\n  app.get('/api/community/posts', async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 20;\n      const offset = parseInt(req.query.offset as string) || 0;\n      \n      const posts = await storage.getCommunityPosts(limit, offset);\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching community posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch community posts\" });\n    }\n  });\n\n  app.post('/api/community/posts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { imageBase64, ...bodyData } = req.body;\n      \n      let imageUrl = null;\n      \n      // Handle base64 image if provided\n      if (imageBase64 && typeof imageBase64 === 'string') {\n        // For now, we'll store the base64 directly as the imageUrl\n        // In a production app, you'd upload to a service like Cloudinary or AWS S3\n        imageUrl = imageBase64;\n      }\n      \n      const postData = insertCommunityPostSchema.parse({\n        ...bodyData,\n        userId,\n        imageUrl,\n      });\n\n      const post = await storage.createCommunityPost(postData);\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error creating community post:\", error);\n      res.status(500).json({ message: \"Failed to create community post\" });\n    }\n  });\n\n  app.post('/api/community/posts/:id/like', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const postId = req.params.id;\n      \n      const success = await storage.likeCommunityPost(userId, postId);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n      res.status(500).json({ message: \"Failed to like post\" });\n    }\n  });\n\n  app.delete('/api/community/posts/:id/like', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const postId = req.params.id;\n      \n      const success = await storage.unlikeCommunityPost(userId, postId);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error unliking post:\", error);\n      res.status(500).json({ message: \"Failed to unlike post\" });\n    }\n  });\n\n  app.get('/api/community/posts/:id/comments', async (req, res) => {\n    try {\n      const postId = req.params.id;\n      const comments = await storage.getPostComments(postId);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post('/api/community/posts/:id/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const postId = req.params.id;\n      const commentData = insertPostCommentSchema.parse({\n        ...req.body,\n        userId,\n        postId,\n      });\n\n      const comment = await storage.createPostComment(commentData);\n      res.json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  // Mood routes\n  app.get('/api/mood', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const days = parseInt(req.query.days as string) || 7;\n      \n      const moods = await storage.getMoodEntries(userId, days);\n      res.json(moods);\n    } catch (error) {\n      console.error(\"Error fetching mood entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch mood entries\" });\n    }\n  });\n\n  app.post('/api/mood', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const moodData = insertMoodEntrySchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const mood = await storage.createMoodEntry(moodData);\n      res.json(mood);\n    } catch (error) {\n      console.error(\"Error creating mood entry:\", error);\n      res.status(500).json({ message: \"Failed to create mood entry\" });\n    }\n  });\n\n  // AI routes\n  app.get('/api/ai/conversations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 50;\n      \n      const conversations = await storage.getAiConversations(userId, limit);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching AI conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.post('/api/ai/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { message, context } = req.body;\n\n      if (!message) {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n\n      const response = await chatWithGenie(message, context);\n      \n      // Store the conversation\n      await storage.createAiConversation({\n        userId,\n        message,\n        response: response.message,\n      });\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error in AI chat:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  // Content routes\n  app.get('/api/content/quote', async (req, res) => {\n    try {\n      const quote = await generateMotivationalQuote();\n      res.json(quote);\n    } catch (error) {\n      console.error(\"Error generating quote:\", error);\n      res.status(500).json({ message: \"Failed to generate quote\" });\n    }\n  });\n\n  // Media recommendations (mock data for now)\n  app.get('/api/media/movies', async (req, res) => {\n    res.json([\n      { id: 1, title: \"The Pursuit of Happyness\", genre: \"Drama • Inspiration\", thumbnail: \"https://images.unsplash.com/photo-1440404653325-ab127d49abc1\" },\n      { id: 2, title: \"Soul\", genre: \"Animation • Philosophy\", thumbnail: \"https://images.unsplash.com/photo-1518676590629-3dcbd9c5a5c9\" },\n      { id: 3, title: \"Inside Out\", genre: \"Animation • Emotional\", thumbnail: \"https://images.unsplash.com/photo-1489599613-e715e6ebe90d\" },\n      { id: 4, title: \"The Secret Life of Walter Mitty\", genre: \"Adventure • Inspiration\", thumbnail: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4\" },\n      { id: 5, title: \"Good Will Hunting\", genre: \"Drama • Growth\", thumbnail: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d\" },\n    ]);\n  });\n\n  app.get('/api/media/music', async (req, res) => {\n    res.json([\n      { id: 1, title: \"Three Little Birds\", artist: \"Bob Marley\", mood: \"Uplifting\", url: \"https://open.spotify.com/track/1example\" },\n      { id: 2, title: \"Happy\", artist: \"Pharrell Williams\", mood: \"Joyful\", url: \"https://open.spotify.com/track/2example\" },\n      { id: 3, title: \"Here Comes the Sun\", artist: \"The Beatles\", mood: \"Hopeful\", url: \"https://open.spotify.com/track/3example\" },\n      { id: 4, title: \"Good Vibrations\", artist: \"The Beach Boys\", mood: \"Positive\", url: \"https://open.spotify.com/track/4example\" },\n      { id: 5, title: \"I Can See Clearly Now\", artist: \"Johnny Nash\", mood: \"Optimistic\", url: \"https://open.spotify.com/track/5example\" },\n    ]);\n  });\n\n  app.get('/api/media/ted-talks', async (req, res) => {\n    res.json([\n      { id: 1, title: \"The Power of Vulnerability\", speaker: \"Brené Brown\", duration: \"20:50\", url: \"https://www.ted.com/talks/brene_brown_the_power_of_vulnerability\" },\n      { id: 2, title: \"How to Make Stress Your Friend\", speaker: \"Kelly McGonigal\", duration: \"14:28\", url: \"https://www.ted.com/talks/kelly_mcgonigal_how_to_make_stress_your_friend\" },\n      { id: 3, title: \"The Happy Secret to Better Work\", speaker: \"Shawn Achor\", duration: \"12:20\", url: \"https://www.ted.com/talks/shawn_achor_the_happy_secret_to_better_work\" },\n      { id: 4, title: \"Your Body Language May Shape Who You Are\", speaker: \"Amy Cuddy\", duration: \"21:02\", url: \"https://www.ted.com/talks/amy_cuddy_your_body_language_may_shape_who_you_are\" },\n      { id: 5, title: \"The Puzzle of Motivation\", speaker: \"Dan Pink\", duration: \"18:36\", url: \"https://www.ted.com/talks/dan_pink_the_puzzle_of_motivation\" },\n    ]);\n  });\n\n  app.get('/api/games', async (req, res) => {\n    res.json([\n      { id: 1, title: \"Peaceful Puzzles\", description: \"Relaxing jigsaw puzzles\", icon: \"puzzle-piece\", url: \"https://www.jigsawplanet.com\" },\n      { id: 2, title: \"Garden Zen\", description: \"Virtual gardening\", icon: \"seedling\", url: \"https://www.gardenscapes.com\" },\n      { id: 3, title: \"Meditation Quest\", description: \"Mindful adventure\", icon: \"leaf\", url: \"https://example.com/meditation-quest\" },\n      { id: 4, title: \"Color Therapy\", description: \"Relaxing coloring\", icon: \"palette\", url: \"https://www.colorfy.net\" },\n      { id: 5, title: \"Breathing Bubbles\", description: \"Breath-guided game\", icon: \"circle\", url: \"https://example.com/breathing-bubbles\" },\n    ]);\n  });\n\n  app.get('/api/books', async (req, res) => {\n    res.json([\n      { id: 1, title: \"The Power of Now\", author: \"Eckhart Tolle\", description: \"A guide to spiritual enlightenment\", url: \"https://archive.org/details/powerofnow00tol\" },\n      { id: 2, title: \"Mindfulness for Beginners\", author: \"Jon Kabat-Zinn\", description: \"Introduction to mindfulness meditation\", url: \"https://archive.org/details/mindfulnessforbe00kaba\" },\n      { id: 3, title: \"The Happiness Project\", author: \"Gretchen Rubin\", description: \"A year-long journey to happiness\", url: \"https://archive.org/details/happinessproject00rubi\" },\n      { id: 4, title: \"Emotional Intelligence\", author: \"Daniel Goleman\", description: \"Understanding and managing emotions\", url: \"https://archive.org/details/emotionalintelli00gole\" },\n      { id: 5, title: \"The Gifts of Imperfection\", author: \"Brené Brown\", description: \"Embracing vulnerability and courage\", url: \"https://archive.org/details/giftsofimperfect00brow\" },\n    ]);\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13781},"server/storage.ts":{"content":"import {\n  users,\n  journalEntries,\n  communityPosts,\n  postLikes,\n  postComments,\n  moodEntries,\n  aiConversations,\n  type User,\n  type UpsertUser,\n  type InsertJournalEntry,\n  type JournalEntry,\n  type InsertCommunityPost,\n  type CommunityPost,\n  type InsertPostComment,\n  type PostComment,\n  type InsertMoodEntry,\n  type MoodEntry,\n  type InsertAiConversation,\n  type AiConversation,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, count, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Journal operations\n  createJournalEntry(entry: InsertJournalEntry): Promise<JournalEntry>;\n  getJournalEntries(userId: string): Promise<JournalEntry[]>;\n  updateJournalEntry(id: string, userId: string, updates: Partial<InsertJournalEntry>): Promise<JournalEntry | undefined>;\n  deleteJournalEntry(id: string, userId: string): Promise<boolean>;\n  \n  // Community operations\n  createCommunityPost(post: InsertCommunityPost): Promise<CommunityPost>;\n  getCommunityPosts(limit?: number, offset?: number): Promise<Array<CommunityPost & { user: User; likesCount: number; commentsCount: number; userLiked: boolean }>>;\n  likeCommunityPost(userId: string, postId: string): Promise<boolean>;\n  unlikeCommunityPost(userId: string, postId: string): Promise<boolean>;\n  \n  // Comments operations\n  createPostComment(comment: InsertPostComment): Promise<PostComment>;\n  getPostComments(postId: string): Promise<Array<PostComment & { user: User }>>;\n  \n  // Mood operations\n  createMoodEntry(mood: InsertMoodEntry): Promise<MoodEntry>;\n  getMoodEntries(userId: string, days?: number): Promise<MoodEntry[]>;\n  \n  // AI conversation operations\n  createAiConversation(conversation: InsertAiConversation): Promise<AiConversation>;\n  getAiConversations(userId: string, limit?: number): Promise<AiConversation[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Journal operations\n  async createJournalEntry(entry: InsertJournalEntry): Promise<JournalEntry> {\n    const [journalEntry] = await db\n      .insert(journalEntries)\n      .values(entry)\n      .returning();\n    return journalEntry;\n  }\n\n  async getJournalEntries(userId: string): Promise<JournalEntry[]> {\n    return await db\n      .select()\n      .from(journalEntries)\n      .where(eq(journalEntries.userId, userId))\n      .orderBy(desc(journalEntries.createdAt));\n  }\n\n  async updateJournalEntry(id: string, userId: string, updates: Partial<InsertJournalEntry>): Promise<JournalEntry | undefined> {\n    const [updated] = await db\n      .update(journalEntries)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(and(eq(journalEntries.id, id), eq(journalEntries.userId, userId)))\n      .returning();\n    return updated;\n  }\n\n  async deleteJournalEntry(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(journalEntries)\n      .where(and(eq(journalEntries.id, id), eq(journalEntries.userId, userId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Community operations\n  async createCommunityPost(post: InsertCommunityPost): Promise<CommunityPost> {\n    const [communityPost] = await db\n      .insert(communityPosts)\n      .values(post)\n      .returning();\n    return communityPost;\n  }\n\n  async getCommunityPosts(limit = 20, offset = 0): Promise<Array<CommunityPost & { user: User; likesCount: number; commentsCount: number; userLiked: boolean }>> {\n    const posts = await db\n      .select({\n        post: communityPosts,\n        user: users,\n        likesCount: count(postLikes.id).as('likesCount'),\n        commentsCount: count(postComments.id).as('commentsCount'),\n      })\n      .from(communityPosts)\n      .leftJoin(users, eq(communityPosts.userId, users.id))\n      .leftJoin(postLikes, eq(communityPosts.id, postLikes.postId))\n      .leftJoin(postComments, eq(communityPosts.id, postComments.postId))\n      .groupBy(communityPosts.id, users.id)\n      .orderBy(desc(communityPosts.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    return posts.map(({ post, user, likesCount, commentsCount }) => ({\n      ...post,\n      user: user!,\n      likesCount: Number(likesCount),\n      commentsCount: Number(commentsCount),\n      userLiked: false, // This would need to be calculated based on current user\n    }));\n  }\n\n  async likeCommunityPost(userId: string, postId: string): Promise<boolean> {\n    try {\n      await db.insert(postLikes).values({ userId, postId });\n      return true;\n    } catch {\n      return false; // Already liked or post doesn't exist\n    }\n  }\n\n  async unlikeCommunityPost(userId: string, postId: string): Promise<boolean> {\n    const result = await db\n      .delete(postLikes)\n      .where(and(eq(postLikes.userId, userId), eq(postLikes.postId, postId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Comments operations\n  async createPostComment(comment: InsertPostComment): Promise<PostComment> {\n    const [postComment] = await db\n      .insert(postComments)\n      .values(comment)\n      .returning();\n    return postComment;\n  }\n\n  async getPostComments(postId: string): Promise<Array<PostComment & { user: User }>> {\n    const comments = await db\n      .select({\n        comment: postComments,\n        user: users,\n      })\n      .from(postComments)\n      .leftJoin(users, eq(postComments.userId, users.id))\n      .where(eq(postComments.postId, postId))\n      .orderBy(postComments.createdAt);\n\n    return comments.map(({ comment, user }) => ({\n      ...comment,\n      user: user!,\n    }));\n  }\n\n  // Mood operations\n  async createMoodEntry(mood: InsertMoodEntry): Promise<MoodEntry> {\n    const [moodEntry] = await db\n      .insert(moodEntries)\n      .values(mood)\n      .returning();\n    return moodEntry;\n  }\n\n  async getMoodEntries(userId: string, days = 7): Promise<MoodEntry[]> {\n    const since = new Date();\n    since.setDate(since.getDate() - days);\n\n    return await db\n      .select()\n      .from(moodEntries)\n      .where(and(\n        eq(moodEntries.userId, userId),\n        sql`${moodEntries.createdAt} >= ${since}`\n      ))\n      .orderBy(desc(moodEntries.createdAt));\n  }\n\n  // AI conversation operations\n  async createAiConversation(conversation: InsertAiConversation): Promise<AiConversation> {\n    const [aiConversation] = await db\n      .insert(aiConversations)\n      .values(conversation)\n      .returning();\n    return aiConversation;\n  }\n\n  async getAiConversations(userId: string, limit = 50): Promise<AiConversation[]> {\n    return await db\n      .select()\n      .from(aiConversations)\n      .where(eq(aiConversations.userId, userId))\n      .orderBy(desc(aiConversations.createdAt))\n      .limit(limit);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7299},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  theme: varchar(\"theme\").default(\"dark\"),\n  language: varchar(\"language\").default(\"en\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Journal entries\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\"),\n  content: text(\"content\").notNull(),\n  mood: varchar(\"mood\"),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Community posts\nexport const communityPosts = pgTable(\"community_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  imageUrl: varchar(\"image_url\"),\n  likes: integer(\"likes\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Post likes\nexport const postLikes = pgTable(\"post_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  postId: varchar(\"post_id\").notNull().references(() => communityPosts.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Post comments\nexport const postComments = pgTable(\"post_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  postId: varchar(\"post_id\").notNull().references(() => communityPosts.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Mood entries\nexport const moodEntries = pgTable(\"mood_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  mood: varchar(\"mood\").notNull(), // \"very_happy\", \"happy\", \"neutral\", \"sad\", \"very_sad\"\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI conversation history\nexport const aiConversations = pgTable(\"ai_conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  message: text(\"message\").notNull(),\n  response: text(\"response\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  journalEntries: many(journalEntries),\n  communityPosts: many(communityPosts),\n  postLikes: many(postLikes),\n  postComments: many(postComments),\n  moodEntries: many(moodEntries),\n  aiConversations: many(aiConversations),\n}));\n\nexport const journalEntriesRelations = relations(journalEntries, ({ one }) => ({\n  user: one(users, {\n    fields: [journalEntries.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const communityPostsRelations = relations(communityPosts, ({ one, many }) => ({\n  user: one(users, {\n    fields: [communityPosts.userId],\n    references: [users.id],\n  }),\n  likes: many(postLikes),\n  comments: many(postComments),\n}));\n\nexport const postLikesRelations = relations(postLikes, ({ one }) => ({\n  user: one(users, {\n    fields: [postLikes.userId],\n    references: [users.id],\n  }),\n  post: one(communityPosts, {\n    fields: [postLikes.postId],\n    references: [communityPosts.id],\n  }),\n}));\n\nexport const postCommentsRelations = relations(postComments, ({ one }) => ({\n  user: one(users, {\n    fields: [postComments.userId],\n    references: [users.id],\n  }),\n  post: one(communityPosts, {\n    fields: [postComments.postId],\n    references: [communityPosts.id],\n  }),\n}));\n\nexport const moodEntriesRelations = relations(moodEntries, ({ one }) => ({\n  user: one(users, {\n    fields: [moodEntries.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const aiConversationsRelations = relations(aiConversations, ({ one }) => ({\n  user: one(users, {\n    fields: [aiConversations.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommunityPostSchema = createInsertSchema(communityPosts).omit({\n  id: true,\n  likes: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPostCommentSchema = createInsertSchema(postComments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMoodEntrySchema = createInsertSchema(moodEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiConversationSchema = createInsertSchema(aiConversations).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertJournalEntry = typeof insertJournalEntrySchema._type;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\nexport type InsertCommunityPost = typeof insertCommunityPostSchema._type;\nexport type CommunityPost = typeof communityPosts.$inferSelect;\nexport type InsertPostComment = typeof insertPostCommentSchema._type;\nexport type PostComment = typeof postComments.$inferSelect;\nexport type InsertMoodEntry = typeof insertMoodEntrySchema._type;\nexport type MoodEntry = typeof moodEntries.$inferSelect;\nexport type InsertAiConversation = typeof insertAiConversationSchema._type;\nexport type AiConversation = typeof aiConversations.$inferSelect;\n","size_bytes":6779},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Journal from \"@/pages/journal\";\nimport Community from \"@/pages/community\";\nimport Snap from \"@/pages/snap\";\nimport Genie from \"@/pages/genie\";\nimport Profile from \"@/pages/profile\";\nimport Media from \"@/pages/media\";\nimport Games from \"@/pages/games\";\nimport Books from \"@/pages/books\";\nimport Shopping from \"@/pages/shopping\";\nimport NotFound from \"@/pages/not-found\";\nimport Navigation from \"@/components/Navigation\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"w-16 h-16 genie-gradient rounded-full animate-pulse glow-effect flex items-center justify-center\">\n          <i className=\"fas fa-magic text-primary-foreground text-xl\"></i>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {!isAuthenticated ? (\n        <Switch>\n          <Route path=\"/\" component={Landing} />\n          <Route component={NotFound} />\n        </Switch>\n      ) : (\n        <div className=\"flex min-h-screen\">\n          <Navigation />\n          <main className=\"flex-1\">\n            <Switch>\n              <Route path=\"/\" component={Dashboard} />\n              <Route path=\"/journal\" component={Journal} />\n              <Route path=\"/community\" component={Community} />\n              <Route path=\"/snap\" component={Snap} />\n              <Route path=\"/genie\" component={Genie} />\n              <Route path=\"/profile\" component={Profile} />\n              <Route path=\"/media\" component={Media} />\n              <Route path=\"/games\" component={Games} />\n              <Route path=\"/books\" component={Books} />\n              <Route path=\"/shopping\" component={Shopping} />\n              <Route component={NotFound} />\n            </Switch>\n          </main>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2629},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Inter:wght@300;400;500;600;700&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 27%, 9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 19%, 16%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(240, 19%, 16%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(263, 70%, 60%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(45, 100%, 60%);\n  --secondary-foreground: hsl(240, 19%, 16%);\n  --muted: hsl(240, 19%, 16%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --accent: hsl(217, 91%, 60%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 85%, 97%);\n  --border: hsl(240, 19%, 27%);\n  --input: hsl(240, 19%, 16%);\n  --ring: hsl(263, 70%, 60%);\n  --chart-1: hsl(203, 88%, 53%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 41%);\n  --chart-5: hsl(341, 75%, 50%);\n  --sidebar: hsl(240, 19%, 16%);\n  --sidebar-foreground: hsl(0, 0%, 95%);\n  --sidebar-primary: hsl(263, 70%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(217, 91%, 60%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(240, 19%, 27%);\n  --sidebar-ring: hsl(263, 70%, 60%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: \"Playfair Display\", serif;\n  --font-mono: \"JetBrains Mono\", monospace;\n  --radius: 12px;\n}\n\n.light {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 27%, 9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 27%, 9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 27%, 9%);\n  --primary: hsl(263, 70%, 50%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(45, 100%, 50%);\n  --secondary-foreground: hsl(240, 27%, 9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(217, 91%, 50%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(263, 70%, 50%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(240, 27%, 9%);\n  --sidebar-primary: hsl(263, 70%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(217, 91%, 50%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(263, 70%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .genie-gradient {\n    background: linear-gradient(135deg, hsl(263, 70%, 60%) 0%, hsl(217, 91%, 60%) 50%, hsl(45, 100%, 60%) 100%);\n  }\n\n  .magical-border {\n    border: 2px solid transparent;\n    background: linear-gradient(var(--background), var(--background)) padding-box,\n               linear-gradient(135deg, hsl(263, 70%, 60%), hsl(217, 91%, 60%), hsl(45, 100%, 60%)) border-box;\n  }\n\n  .glow-effect {\n    box-shadow: 0 0 20px hsla(263, 70%, 60%, 0.3),\n               0 0 40px hsla(217, 91%, 60%, 0.2),\n               0 0 60px hsla(45, 100%, 60%, 0.1);\n  }\n\n  .breathing-circle {\n    animation: breathe 4s ease-in-out infinite;\n  }\n\n  @keyframes breathe {\n    0%, 100% { transform: scale(1); opacity: 0.7; }\n    50% { transform: scale(1.1); opacity: 1; }\n  }\n\n  .float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n\n  .magical-shimmer {\n    background: linear-gradient(45deg, transparent 30%, hsla(45, 100%, 60%, 0.1) 50%, transparent 70%);\n    animation: shimmer 2s ease-in-out infinite;\n  }\n\n  @keyframes shimmer {\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n  }\n\n  .fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  @keyframes fadeIn {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n}\n","size_bytes":4248},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AICompanion.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface Message {\n  id: string;\n  content: string;\n  isUser: boolean;\n  timestamp: Date;\n  tone?: string;\n  suggestions?: string[];\n}\n\nexport default function AICompanion() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // Load conversation history\n  const { data: conversations } = useQuery({\n    queryKey: [\"/api/ai/conversations\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/ai/conversations?limit=20\");\n      return response.json();\n    },\n  });\n\n  useEffect(() => {\n    if (conversations) {\n      const formattedMessages: Message[] = [];\n      conversations.reverse().forEach((conv: any) => {\n        formattedMessages.push({\n          id: `user-${conv.id}`,\n          content: conv.message,\n          isUser: true,\n          timestamp: new Date(conv.createdAt),\n        });\n        formattedMessages.push({\n          id: `ai-${conv.id}`,\n          content: conv.response,\n          isUser: false,\n          timestamp: new Date(conv.createdAt),\n        });\n      });\n      setMessages(formattedMessages);\n    }\n  }, [conversations]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      return await apiRequest(\"POST\", \"/api/ai/chat\", { message });\n    },\n    onSuccess: async (response) => {\n      const data = await response.json();\n      const aiMessage: Message = {\n        id: `ai-${Date.now()}`,\n        content: data.message,\n        isUser: false,\n        timestamp: new Date(),\n        tone: data.tone,\n        suggestions: data.suggestions,\n      };\n      setMessages(prev => [...prev, aiMessage]);\n\n      // Text-to-speech\n      if ('speechSynthesis' in window) {\n        const utterance = new SpeechSynthesisUtterance(data.message);\n        utterance.rate = 0.8;\n        utterance.pitch = 1.1;\n        utterance.onstart = () => setIsSpeaking(true);\n        utterance.onend = () => setIsSpeaking(false);\n        speechSynthesis.speak(utterance);\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!input.trim()) return;\n\n    const userMessage: Message = {\n      id: `user-${Date.now()}`,\n      content: input,\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    chatMutation.mutate(input);\n    setInput(\"\");\n  };\n\n  const startVoiceRecognition = () => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      toast({\n        title: \"Not Supported\",\n        description: \"Voice recognition is not supported in this browser.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n    const recognition = new SpeechRecognition();\n    \n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n\n    recognition.onstart = () => setIsListening(true);\n    recognition.onend = () => setIsListening(false);\n    \n    recognition.onresult = (event: any) => {\n      const transcript = event.results[0][0].transcript;\n      setInput(transcript);\n    };\n\n    recognition.onerror = () => {\n      setIsListening(false);\n      toast({\n        title: \"Voice Error\",\n        description: \"Could not capture voice. Please try again.\",\n        variant: \"destructive\",\n      });\n    };\n\n    recognition.start();\n  };\n\n  const stopSpeaking = () => {\n    if ('speechSynthesis' in window) {\n      speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  };\n\n  // Initialize with welcome message if no conversations\n  useEffect(() => {\n    if (conversations && conversations.length === 0) {\n      const welcomeMessage: Message = {\n        id: 'welcome',\n        content: \"Hello! ✨ I'm your Genie Guide, here to support you on your wellness journey. How are you feeling today?\",\n        isUser: false,\n        timestamp: new Date(),\n        tone: \"supportive\",\n      };\n      setMessages([welcomeMessage]);\n    }\n  }, [conversations]);\n\n  return (\n    <Card className=\"magical-border glow-effect h-96\">\n      <CardContent className=\"p-0 h-full flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-border\">\n          <h3 className=\"text-lg font-serif font-semibold text-primary flex items-center\">\n            <div className=\"w-8 h-8 mr-2 genie-gradient rounded-full flex items-center justify-center float\">\n              <i className=\"fas fa-robot text-primary-foreground text-sm\"></i>\n            </div>\n            Ur Genie\n          </h3>\n          <div className=\"flex space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={startVoiceRecognition}\n              disabled={isListening}\n              data-testid=\"voice-input\"\n            >\n              <i className={`fas fa-microphone ${isListening ? 'animate-pulse text-destructive' : ''}`}></i>\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={stopSpeaking}\n              disabled={!isSpeaking}\n              data-testid=\"stop-speech\"\n            >\n              <i className={`fas fa-volume-up ${isSpeaking ? 'animate-pulse text-primary' : ''}`}></i>\n            </Button>\n          </div>\n        </div>\n\n        {/* Messages */}\n        <ScrollArea className=\"flex-1 p-4\">\n          <div className=\"space-y-4\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex items-start space-x-2 ${\n                  message.isUser ? 'justify-end' : 'justify-start'\n                }`}\n              >\n                {!message.isUser && (\n                  <div className=\"w-6 h-6 genie-gradient rounded-full flex items-center justify-center flex-shrink-0\">\n                    <i className=\"fas fa-magic text-xs text-primary-foreground\"></i>\n                  </div>\n                )}\n                \n                <div\n                  className={`rounded-lg p-3 max-w-[80%] ${\n                    message.isUser\n                      ? 'bg-accent text-accent-foreground'\n                      : 'bg-primary/20 text-foreground'\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.content}</p>\n                  {message.suggestions && message.suggestions.length > 0 && (\n                    <div className=\"mt-2 flex flex-wrap gap-1\">\n                      {message.suggestions.map((suggestion, index) => (\n                        <Button\n                          key={index}\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"text-xs h-6\"\n                          onClick={() => setInput(suggestion)}\n                        >\n                          {suggestion}\n                        </Button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {message.isUser && (\n                  <div className=\"w-6 h-6 bg-muted rounded-full flex items-center justify-center flex-shrink-0\">\n                    <i className=\"fas fa-user text-xs\"></i>\n                  </div>\n                )}\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        {/* Input */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex space-x-2\">\n            <Input\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder=\"Share your thoughts...\"\n              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n              disabled={chatMutation.isPending}\n              data-testid=\"ai-chat-input\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={!input.trim() || chatMutation.isPending}\n              className=\"genie-gradient hover:opacity-90\"\n              data-testid=\"send-message\"\n            >\n              {chatMutation.isPending ? (\n                <i className=\"fas fa-spinner animate-spin text-primary-foreground\"></i>\n              ) : (\n                <i className=\"fas fa-paper-plane text-primary-foreground\"></i>\n              )}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Extend window interface for speech recognition\ndeclare global {\n  interface Window {\n    webkitSpeechRecognition: any;\n    SpeechRecognition: any;\n  }\n}\n","size_bytes":9846},"client/src/components/BreathingExercise.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface BreathingExerciseProps {\n  className?: string;\n}\n\nexport default function BreathingExercise({ className = \"\" }: BreathingExerciseProps) {\n  const [isActive, setIsActive] = useState(false);\n  const [phase, setPhase] = useState<\"inhale\" | \"hold\" | \"exhale\">(\"inhale\");\n\n  const toggleBreathing = () => {\n    setIsActive(!isActive);\n    if (!isActive) {\n      startBreathingCycle();\n    }\n  };\n\n  const startBreathingCycle = () => {\n    // 4-7-8 breathing pattern: inhale 4s, hold 7s, exhale 8s\n    const cycle = () => {\n      // Inhale phase\n      setPhase(\"inhale\");\n      setTimeout(() => {\n        // Hold phase\n        setPhase(\"hold\");\n        setTimeout(() => {\n          // Exhale phase\n          setPhase(\"exhale\");\n          setTimeout(() => {\n            if (isActive) {\n              cycle(); // Continue the cycle\n            }\n          }, 8000); // 8 seconds exhale\n        }, 7000); // 7 seconds hold\n      }, 4000); // 4 seconds inhale\n    };\n    cycle();\n  };\n\n  const getPhaseText = () => {\n    switch (phase) {\n      case \"inhale\":\n        return \"Breathe In...\";\n      case \"hold\":\n        return \"Hold...\";\n      case \"exhale\":\n        return \"Breathe Out...\";\n      default:\n        return \"Ready to Begin\";\n    }\n  };\n\n  return (\n    <Card className={`magical-border ${className}`}>\n      <CardContent className=\"p-8\">\n        <div className=\"text-center\">\n          <h3 className=\"text-2xl font-serif font-semibold mb-6 text-primary flex items-center justify-center\">\n            <i className=\"fas fa-wind mr-2\"></i>\n            ✨ Mindful Breathing ✨\n          </h3>\n          \n          <div className=\"flex justify-center mb-6\">\n            <div className=\"relative\">\n              <div \n                className={`w-32 h-32 rounded-full genie-gradient flex items-center justify-center transition-all duration-1000 ${\n                  isActive ? 'breathing-circle glow-effect' : 'opacity-70'\n                }`}\n              >\n                <div className=\"w-20 h-20 rounded-full bg-background/50 flex items-center justify-center\">\n                  <i className=\"fas fa-wind text-2xl text-primary-foreground\"></i>\n                </div>\n              </div>\n              <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2\">\n                <p className=\"text-sm text-muted-foreground font-medium\" data-testid=\"breathing-phase\">\n                  {isActive ? getPhaseText() : \"Ready to Begin\"}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-center space-x-4\">\n            <Button\n              onClick={toggleBreathing}\n              className={isActive ? \"bg-destructive hover:bg-destructive/90\" : \"genie-gradient hover:opacity-90\"}\n              data-testid=\"breathing-toggle\"\n            >\n              <i className={`fas ${isActive ? 'fa-pause' : 'fa-play'} mr-2`}></i>\n              {isActive ? 'Pause Session' : 'Start Session'}\n            </Button>\n            <Button variant=\"outline\" data-testid=\"breathing-customize\">\n              <i className=\"fas fa-cog mr-2\"></i>\n              Customize\n            </Button>\n          </div>\n\n          {/* Breathing Guide */}\n          {isActive && (\n            <div className=\"mt-6 p-4 bg-muted/50 rounded-lg\">\n              <p className=\"text-sm text-muted-foreground\">\n                Following the 4-7-8 breathing pattern for deep relaxation\n              </p>\n              <div className=\"flex justify-center space-x-6 mt-2 text-xs\">\n                <span className={phase === \"inhale\" ? \"text-primary font-semibold\" : \"text-muted-foreground\"}>\n                  Inhale (4s)\n                </span>\n                <span className={phase === \"hold\" ? \"text-primary font-semibold\" : \"text-muted-foreground\"}>\n                  Hold (7s)\n                </span>\n                <span className={phase === \"exhale\" ? \"text-primary font-semibold\" : \"text-muted-foreground\"}>\n                  Exhale (8s)\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4270},"client/src/components/JournalEditor.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface JournalEditorProps {\n  simplified?: boolean;\n  entry?: any;\n  onSave?: () => void;\n}\n\nexport default function JournalEditor({ simplified = false, entry, onSave }: JournalEditorProps) {\n  const [title, setTitle] = useState(entry?.title || \"\");\n  const [content, setContent] = useState(entry?.content || \"\");\n  const [selectedEmoji, setSelectedEmoji] = useState(\"🌟\");\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const emojis = [\"🌟\", \"✨\", \"🌙\", \"🦋\", \"💜\", \"🌸\", \"🌈\", \"💫\", \"🕊️\", \"🌺\"];\n\n  const saveMutation = useMutation({\n    mutationFn: async (data: { title: string; content: string }) => {\n      if (entry) {\n        return await apiRequest(\"PATCH\", `/api/journal/${entry.id}`, data);\n      } else {\n        return await apiRequest(\"POST\", \"/api/journal\", data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: entry ? \"Journal entry updated!\" : \"Journal entry saved!\",\n      });\n      if (!entry) {\n        setTitle(\"\");\n        setContent(\"\");\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/journal\"] });\n      onSave?.();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to save journal entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    if (!content.trim()) {\n      toast({\n        title: \"Required\",\n        description: \"Please write something in your journal entry.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveMutation.mutate({\n      title: title.trim() || undefined,\n      content: content.trim(),\n    });\n  };\n\n  const insertAtCursor = (text: string) => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const newContent = content.substring(0, start) + text + content.substring(end);\n    \n    setContent(newContent);\n    \n    // Restore cursor position\n    setTimeout(() => {\n      textarea.selectionStart = textarea.selectionEnd = start + text.length;\n      textarea.focus();\n    }, 0);\n  };\n\n  const formatText = (format: string) => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = content.substring(start, end);\n    \n    if (!selectedText) return;\n\n    let formattedText = selectedText;\n    switch (format) {\n      case 'bold':\n        formattedText = `**${selectedText}**`;\n        break;\n      case 'italic':\n        formattedText = `*${selectedText}*`;\n        break;\n      case 'underline':\n        formattedText = `__${selectedText}__`;\n        break;\n    }\n\n    const newContent = content.substring(0, start) + formattedText + content.substring(end);\n    setContent(newContent);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {!simplified && (\n        <Input\n          placeholder=\"Give your entry a title (optional)\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          data-testid=\"journal-title\"\n        />\n      )}\n\n      <div>\n        <p className=\"text-muted-foreground mb-3 text-sm\">\n          ✨ {simplified ? \"What's on your mind today?\" : \"What magical moments happened today? Share your thoughts...\"}\n        </p>\n        \n        {!simplified && (\n          <div className=\"flex items-center space-x-2 mb-3 p-2 bg-muted rounded-lg\">\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => formatText('bold')}\n              data-testid=\"format-bold\"\n            >\n              <i className=\"fas fa-bold\"></i>\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => formatText('italic')}\n              data-testid=\"format-italic\"\n            >\n              <i className=\"fas fa-italic\"></i>\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => formatText('underline')}\n              data-testid=\"format-underline\"\n            >\n              <i className=\"fas fa-underline\"></i>\n            </Button>\n            <div className=\"w-px h-4 bg-border\"></div>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => insertAtCursor(`${selectedEmoji} `)}\n              data-testid=\"insert-emoji\"\n            >\n              <i className=\"fas fa-smile mr-1\"></i>\n              {selectedEmoji}\n            </Button>\n          </div>\n        )}\n\n        <Textarea\n          ref={textareaRef}\n          placeholder={simplified ? \"I'm feeling...\" : \"Today I felt grateful for...\"}\n          value={content}\n          onChange={(e) => setContent(e.target.value)}\n          className={simplified ? \"min-h-20\" : \"min-h-32\"}\n          data-testid=\"journal-content\"\n        />\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex space-x-2\">\n          {emojis.map((emoji) => (\n            <button\n              key={emoji}\n              onClick={() => setSelectedEmoji(emoji)}\n              className={`text-2xl hover:scale-110 transition-transform ${\n                selectedEmoji === emoji ? 'scale-125' : ''\n              }`}\n              data-testid={`emoji-${emoji}`}\n            >\n              {emoji}\n            </button>\n          ))}\n        </div>\n        <Button\n          onClick={handleSave}\n          disabled={!content.trim() || saveMutation.isPending}\n          className=\"genie-gradient hover:opacity-90\"\n          data-testid=\"save-journal\"\n        >\n          {saveMutation.isPending ? (\n            <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n          ) : (\n            <i className=\"fas fa-save mr-2\"></i>\n          )}\n          {entry ? \"Update Entry\" : \"Save Entry\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6854},"client/src/components/MediaSection.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Link } from \"wouter\";\n\ninterface MediaSectionProps {\n  preview?: boolean;\n}\n\nexport default function MediaSection({ preview = false }: MediaSectionProps) {\n  const [activeTab, setActiveTab] = useState(\"movies\");\n\n  const { data: movies } = useQuery({\n    queryKey: [\"/api/media/movies\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/media/movies\");\n      return response.json();\n    },\n  });\n\n  const { data: music } = useQuery({\n    queryKey: [\"/api/media/music\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/media/music\");\n      return response.json();\n    },\n  });\n\n  const { data: tedTalks } = useQuery({\n    queryKey: [\"/api/media/ted-talks\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/media/ted-talks\");\n      return response.json();\n    },\n  });\n\n  const displayItems = (items: any[], limit?: number) => {\n    return limit ? items?.slice(0, limit) : items;\n  };\n\n  return (\n    <Card className=\"magical-border\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-serif font-semibold text-primary flex items-center\">\n            <i className=\"fas fa-star mr-2\"></i>\n            Uplifting Media\n          </h3>\n          {preview && (\n            <Link href=\"/media\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"view-all-media\">\n                View All\n              </Button>\n            </Link>\n          )}\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"movies\" data-testid=\"tab-movies\">Movies</TabsTrigger>\n            <TabsTrigger value=\"music\" data-testid=\"tab-music\">Music</TabsTrigger>\n            <TabsTrigger value=\"tedtalks\" data-testid=\"tab-tedtalks\">TED Talks</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"movies\" className=\"mt-6\">\n            <div className={`grid ${preview ? 'grid-cols-2 md:grid-cols-3' : 'grid-cols-2 md:grid-cols-4 lg:grid-cols-5'} gap-4`}>\n              {displayItems(movies || [], preview ? 3 : undefined)?.map((movie) => (\n                <div key={movie.id} className=\"group cursor-pointer\" data-testid={`movie-${movie.id}`}>\n                  <div className=\"aspect-[2/3] bg-gradient-to-br from-accent/20 to-primary/20 rounded-lg mb-2 group-hover:scale-105 transition-transform overflow-hidden\">\n                    <img \n                      src={movie.thumbnail} \n                      alt={`${movie.title} poster`}\n                      className=\"w-full h-full object-cover\"\n                      onError={(e) => {\n                        const target = e.target as HTMLImageElement;\n                        target.style.display = 'none';\n                      }}\n                    />\n                    <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-accent/20 to-primary/20\">\n                      <i className=\"fas fa-play text-4xl text-primary/50\"></i>\n                    </div>\n                  </div>\n                  <h4 className=\"font-medium text-sm line-clamp-2\">{movie.title}</h4>\n                  <p className=\"text-xs text-muted-foreground\">{movie.genre}</p>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"music\" className=\"mt-6\">\n            <div className=\"space-y-3\">\n              {displayItems(music || [], preview ? 3 : undefined)?.map((song) => (\n                <div key={song.id} className=\"flex items-center space-x-3 p-3 bg-card/50 rounded-lg hover:bg-accent/10 transition-colors cursor-pointer\" data-testid={`song-${song.id}`}>\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-music text-primary-foreground\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium\">{song.title}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{song.artist}</p>\n                    <p className=\"text-xs text-primary\">{song.mood}</p>\n                  </div>\n                  <Button size=\"sm\" variant=\"ghost\">\n                    <i className=\"fas fa-play\"></i>\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"tedtalks\" className=\"mt-6\">\n            <div className=\"space-y-3\">\n              {displayItems(tedTalks || [], preview ? 3 : undefined)?.map((talk) => (\n                <div key={talk.id} className=\"flex items-center space-x-3 p-3 bg-card/50 rounded-lg hover:bg-accent/10 transition-colors cursor-pointer\" data-testid={`tedtalk-${talk.id}`}>\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-secondary to-primary rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-video text-primary-foreground\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-sm line-clamp-2\">{talk.title}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{talk.speaker}</p>\n                    <p className=\"text-xs text-accent\">{talk.duration}</p>\n                  </div>\n                  <Button size=\"sm\" variant=\"ghost\" asChild>\n                    <a href={talk.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <i className=\"fas fa-external-link-alt\"></i>\n                    </a>\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {preview && (\n          <div className=\"mt-4 text-center\">\n            <Link href=\"/media\">\n              <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80\" data-testid=\"view-more-media\">\n                <i className=\"fas fa-chevron-down mr-2\"></i>View More\n              </Button>\n            </Link>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6466},"client/src/components/MoodTracker.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst moods = [\n  { emoji: \"😄\", value: \"very_happy\", label: \"Very Happy\" },\n  { emoji: \"😊\", value: \"happy\", label: \"Happy\" },\n  { emoji: \"😐\", value: \"neutral\", label: \"Neutral\" },\n  { emoji: \"😔\", value: \"sad\", label: \"Sad\" },\n  { emoji: \"😢\", value: \"very_sad\", label: \"Very Sad\" },\n];\n\nexport default function MoodTracker() {\n  const [selectedMood, setSelectedMood] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: moodEntries } = useQuery({\n    queryKey: [\"/api/mood\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/mood?days=7\");\n      return response.json();\n    },\n  });\n\n  const moodMutation = useMutation({\n    mutationFn: async (mood: string) => {\n      return await apiRequest(\"POST\", \"/api/mood\", { mood });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Mood Logged\",\n        description: \"Your mood has been recorded for today.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/mood\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to log mood. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMoodSelect = (moodValue: string) => {\n    setSelectedMood(moodValue);\n    moodMutation.mutate(moodValue);\n  };\n\n  const getMoodColor = (mood: string) => {\n    switch (mood) {\n      case \"very_happy\":\n        return \"bg-green-500\";\n      case \"happy\":\n        return \"bg-blue-500\";\n      case \"neutral\":\n        return \"bg-yellow-500\";\n      case \"sad\":\n        return \"bg-orange-500\";\n      case \"very_sad\":\n        return \"bg-red-500\";\n      default:\n        return \"bg-muted\";\n    }\n  };\n\n  const getAverageMood = () => {\n    if (!moodEntries || moodEntries.length === 0) return \"No data\";\n    \n    const moodValues = {\n      very_sad: 1,\n      sad: 2,\n      neutral: 3,\n      happy: 4,\n      very_happy: 5,\n    };\n\n    const average = moodEntries.reduce((sum: number, entry: any) => {\n      return sum + (moodValues[entry.mood as keyof typeof moodValues] || 3);\n    }, 0) / moodEntries.length;\n\n    if (average >= 4.5) return \"Great\";\n    if (average >= 3.5) return \"Good\";\n    if (average >= 2.5) return \"Okay\";\n    if (average >= 1.5) return \"Low\";\n    return \"Poor\";\n  };\n\n  // Get today's mood if already logged\n  const todaysMood = moodEntries?.find((entry: any) => {\n    const today = new Date();\n    const entryDate = new Date(entry.createdAt);\n    return entryDate.toDateString() === today.toDateString();\n  });\n\n  return (\n    <Card className=\"magical-border\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-serif font-semibold text-primary mb-4\">Daily Mood</h3>\n        \n        <div className=\"text-center mb-4\">\n          <p className=\"text-sm text-muted-foreground mb-3\">\n            {todaysMood ? \"Your mood today:\" : \"How are you feeling today?\"}\n          </p>\n          \n          <div className=\"flex justify-center space-x-2\">\n            {moods.map((mood) => (\n              <button\n                key={mood.value}\n                onClick={() => !todaysMood && handleMoodSelect(mood.value)}\n                disabled={moodMutation.isPending || !!todaysMood}\n                className={`text-2xl hover:scale-125 transition-transform p-1 rounded-full ${\n                  selectedMood === mood.value || todaysMood?.mood === mood.value\n                    ? 'bg-primary/20 scale-125'\n                    : ''\n                } ${todaysMood ? 'cursor-not-allowed opacity-50' : 'cursor-pointer'}`}\n                title={mood.label}\n                data-testid={`mood-${mood.value}`}\n              >\n                {mood.emoji}\n              </button>\n            ))}\n          </div>\n          \n          {todaysMood && (\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Logged at {new Date(todaysMood.createdAt).toLocaleTimeString()}\n            </p>\n          )}\n        </div>\n\n        {moodEntries && moodEntries.length > 0 && (\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-xs text-muted-foreground\">\n              <span>This Week</span>\n              <span>Avg: {getAverageMood()}</span>\n            </div>\n            <div className=\"flex space-x-1 h-2\">\n              {Array.from({ length: 7 }, (_, i) => {\n                const date = new Date();\n                date.setDate(date.getDate() - (6 - i));\n                \n                const dayMood = moodEntries.find((entry: any) => {\n                  const entryDate = new Date(entry.createdAt);\n                  return entryDate.toDateString() === date.toDateString();\n                });\n                \n                return (\n                  <div\n                    key={i}\n                    className={`flex-1 rounded-sm ${\n                      dayMood ? getMoodColor(dayMood.mood) : 'bg-muted'\n                    }`}\n                    title={`${date.toLocaleDateString()}: ${\n                      dayMood ? moods.find(m => m.value === dayMood.mood)?.label : 'No data'\n                    }`}\n                  />\n                );\n              })}\n            </div>\n            <div className=\"flex justify-between text-xs text-muted-foreground\">\n              <span>6 days ago</span>\n              <span>Today</span>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6089},"client/src/components/Navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst languages = [\n  { code: \"en\", name: \"English\" },\n  { code: \"es\", name: \"Español\" },\n  { code: \"fr\", name: \"Français\" },\n  { code: \"ar\", name: \"العربية\" },\n  { code: \"zh\", name: \"中文\" },\n  { code: \"hi\", name: \"हिंदी\" },\n];\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const [language, setLanguage] = useState(\"en\");\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const navItems = [\n    { path: \"/\", label: \"Home\", icon: \"fas fa-home\" },\n    { path: \"/journal\", label: \"Journal\", icon: \"fas fa-feather-alt\" },\n    { path: \"/community\", label: \"Community\", icon: \"fas fa-users\" },\n    { path: \"/snap\", label: \"Snap\", icon: \"fas fa-camera\" },\n    { path: \"/genie\", label: \"Ur Genie\", icon: \"fas fa-robot\" },\n    { path: \"/media\", label: \"Media\", icon: \"fas fa-play-circle\" },\n    { path: \"/games\", label: \"Games\", icon: \"fas fa-gamepad\" },\n    { path: \"/books\", label: \"Books\", icon: \"fas fa-book-open\" },\n    { path: \"/shopping\", label: \"Shopping\", icon: \"fas fa-shopping-bag\" },\n  ];\n\n  return (\n    <>\n      {/* Desktop Sidebar */}\n      <aside className={cn(\n        \"hidden md:flex flex-col bg-card border-r border-border transition-all duration-300\",\n        isCollapsed ? \"w-16\" : \"w-64\"\n      )}>\n        {/* Header */}\n        <div className=\"p-4 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\" className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 genie-gradient rounded-full flex items-center justify-center glow-effect shrink-0\">\n                <i className=\"fas fa-magic text-primary-foreground text-lg\"></i>\n              </div>\n              {!isCollapsed && (\n                <h1 className=\"text-xl font-serif font-bold text-primary\">MindBloom</h1>\n              )}\n            </Link>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsCollapsed(!isCollapsed)}\n              className=\"p-2\"\n              data-testid=\"sidebar-toggle\"\n            >\n              <i className={`fas fa-${isCollapsed ? 'angle-right' : 'angle-left'}`}></i>\n            </Button>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 p-4 space-y-2\">\n          {navItems.map((item) => (\n            <Link key={item.path} href={item.path}>\n              <Button\n                variant={location === item.path ? \"default\" : \"ghost\"}\n                className={cn(\n                  \"w-full justify-start\",\n                  location === item.path && \"genie-gradient\",\n                  isCollapsed && \"px-2\"\n                )}\n                data-testid={`nav-${item.label.toLowerCase()}`}\n              >\n                <i className={`${item.icon} ${isCollapsed ? '' : 'mr-3'} w-4`}></i>\n                {!isCollapsed && item.label}\n              </Button>\n            </Link>\n          ))}\n        </nav>\n\n        {/* User Section */}\n        <div className=\"p-4 border-t border-border space-y-4\">\n          {/* User Profile */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                className={cn(\n                  \"w-full justify-start p-2\",\n                  isCollapsed && \"justify-center\"\n                )}\n                data-testid=\"profile-menu\"\n              >\n                <Avatar className=\"w-8 h-8 shrink-0\">\n                  <AvatarImage src={(user as any)?.profileImageUrl || undefined} />\n                  <AvatarFallback className=\"genie-gradient text-primary-foreground\">\n                    {(user as any)?.firstName?.[0] || (user as any)?.email?.[0] || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                {!isCollapsed && (\n                  <div className=\"ml-3 text-left overflow-hidden\">\n                    <p className=\"text-sm font-medium truncate\">\n                      {(user as any)?.firstName || (user as any)?.email?.split(\"@\")[0] || \"User\"}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground truncate\">\n                      {(user as any)?.email || \"\"}\n                    </p>\n                  </div>\n                )}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align={isCollapsed ? \"center\" : \"start\"} side=\"right\">\n              <DropdownMenuItem asChild>\n                <Link href=\"/profile\">\n                  <i className=\"fas fa-user mr-2\"></i>\n                  Profile\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem asChild>\n                <a href=\"/api/logout\">\n                  <i className=\"fas fa-sign-out-alt mr-2\"></i>\n                  Logout\n                </a>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Controls */}\n          {!isCollapsed && (\n            <div className=\"space-y-3\">\n              {/* Language Selector */}\n              <Select value={language} onValueChange={setLanguage}>\n                <SelectTrigger className=\"w-full\" data-testid=\"language-selector\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {languages.map((lang) => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      {lang.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Theme Selector */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"theme-selector\">\n                    <i className=\"fas fa-palette mr-2\"></i>\n                    Theme\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\" side=\"right\">\n                  <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n                    <i className=\"fas fa-sun mr-2\"></i>\n                    Light\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n                    <i className=\"fas fa-moon mr-2\"></i>\n                    Dark\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n                    <i className=\"fas fa-desktop mr-2\"></i>\n                    System\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          )}\n        </div>\n      </aside>\n\n      {/* Mobile Bottom Navigation */}\n      <nav className=\"fixed bottom-0 left-0 right-0 bg-background/95 backdrop-blur-sm border-t border-border md:hidden z-50\">\n        <div className=\"flex items-center justify-around py-2\">\n          {navItems.slice(0, 5).map((item) => (\n            <Link key={item.path} href={item.path}>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className={`flex flex-col items-center py-2 px-3 ${\n                  location === item.path ? \"text-primary\" : \"text-muted-foreground\"\n                }`}\n                data-testid={`mobile-nav-${item.label.toLowerCase()}`}\n              >\n                <i className={`${item.icon} mb-1`}></i>\n                <span className=\"text-xs\">{item.label}</span>\n              </Button>\n            </Link>\n          ))}\n        </div>\n      </nav>\n    </>\n  );\n}","size_bytes":8323},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"mindbloom-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1608},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/books.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Books() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: books } = useQuery({\n    queryKey: [\"/api/books\"],\n  });\n\n  const filteredBooks = books?.filter((book: any) =>\n    book.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    book.author.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    book.description.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const bookCategories = [\n    {\n      name: \"Mindfulness & Meditation\",\n      books: filteredBooks.filter((book: any) => \n        book.title.toLowerCase().includes('mindfulness') || \n        book.title.toLowerCase().includes('now') ||\n        book.author.toLowerCase().includes('kabat-zinn') ||\n        book.author.toLowerCase().includes('tolle')\n      ),\n      color: \"bg-green-500/20 text-green-600 dark:text-green-400\",\n      icon: \"fas fa-leaf\"\n    },\n    {\n      name: \"Personal Growth\",\n      books: filteredBooks.filter((book: any) => \n        book.title.toLowerCase().includes('happiness') || \n        book.title.toLowerCase().includes('emotional') ||\n        book.title.toLowerCase().includes('gifts')\n      ),\n      color: \"bg-blue-500/20 text-blue-600 dark:text-blue-400\", \n      icon: \"fas fa-arrow-up\"\n    },\n    {\n      name: \"Self-Help & Motivation\",\n      books: filteredBooks.filter((book: any) => \n        !book.title.toLowerCase().includes('mindfulness') &&\n        !book.title.toLowerCase().includes('now') &&\n        !book.title.toLowerCase().includes('happiness') &&\n        !book.title.toLowerCase().includes('emotional') &&\n        !book.title.toLowerCase().includes('gifts') &&\n        !book.author.toLowerCase().includes('kabat-zinn') &&\n        !book.author.toLowerCase().includes('tolle')\n      ),\n      color: \"bg-purple-500/20 text-purple-600 dark:text-purple-400\",\n      icon: \"fas fa-lightbulb\"\n    },\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n      {/* Header */}\n      <div className=\"text-center mb-8 fade-in\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"w-16 h-16 genie-gradient rounded-full flex items-center justify-center glow-effect\">\n            <i className=\"fas fa-book-open text-primary-foreground text-2xl\"></i>\n          </div>\n        </div>\n        <h1 className=\"text-4xl font-serif font-bold mb-4 genie-gradient bg-clip-text text-transparent\">\n          Wisdom Library\n        </h1>\n        <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n          Discover transformative books that inspire growth, healing, and inner peace. All freely available for your journey.\n        </p>\n      </div>\n\n      {/* Search */}\n      <Card className=\"magical-border mb-8 fade-in\">\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n            <Input\n              placeholder=\"Search books, authors, or topics...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-books\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Featured Book */}\n      <Card className=\"magical-border glow-effect mb-8 fade-in\">\n        <CardHeader>\n          <CardTitle className=\"text-center text-xl font-serif text-primary flex items-center justify-center\">\n            <i className=\"fas fa-star mr-2\"></i>\n            ✨ Book of the Day ✨\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-6 max-w-3xl mx-auto\">\n            <div className=\"w-32 h-40 bg-gradient-to-br from-primary/20 to-accent/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n              <div className=\"text-center\">\n                <i className=\"fas fa-book-open text-4xl text-primary mb-2\"></i>\n                <div className=\"text-xs text-muted-foreground\">Book Cover</div>\n              </div>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-2xl font-serif font-semibold mb-2\">The Power of Now</h3>\n              <p className=\"text-lg text-secondary mb-2\">by Eckhart Tolle</p>\n              <p className=\"text-muted-foreground mb-4\">\n                A guide to spiritual enlightenment that teaches the importance of living in the present moment. \n                This transformative book offers practical teachings to help you find peace and happiness by focusing on the now.\n              </p>\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                <Badge className=\"bg-green-500/20 text-green-600 dark:text-green-400\">Mindfulness</Badge>\n                <Badge className=\"bg-blue-500/20 text-blue-600 dark:text-blue-400\">Spirituality</Badge>\n                <Badge className=\"bg-yellow-500/20 text-yellow-600 dark:text-yellow-400\">Present Moment</Badge>\n              </div>\n              <div className=\"flex space-x-3\">\n                <Button className=\"genie-gradient hover:opacity-90\" asChild data-testid=\"read-featured\">\n                  <a href=\"https://archive.org/details/powerofnow00tol\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <i className=\"fas fa-book-reader mr-2\"></i>\n                    Read Online\n                  </a>\n                </Button>\n                <Button variant=\"outline\" asChild>\n                  <a href=\"https://archive.org/details/powerofnow00tol\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <i className=\"fas fa-download mr-2\"></i>\n                    Download\n                  </a>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Book Categories */}\n      <div className=\"space-y-8\">\n        {bookCategories.map((category) => (\n          category.books.length > 0 && (\n            <div key={category.name} className=\"fade-in\">\n              <div className=\"flex items-center mb-6\">\n                <div className={`w-12 h-12 ${category.color} rounded-lg flex items-center justify-center mr-4`}>\n                  <i className={`${category.icon} text-lg`}></i>\n                </div>\n                <div>\n                  <h2 className=\"text-2xl font-serif font-semibold text-primary\">{category.name}</h2>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {category.books.length} book{category.books.length !== 1 ? 's' : ''} available\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {category.books.map((book: any) => (\n                  <Card key={book.id} className=\"hover:magical-border hover:glow-effect transition-all group\" data-testid={`book-${book.id}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex space-x-4\">\n                        <div className=\"w-20 h-28 bg-gradient-to-br from-primary/20 to-accent/20 rounded-lg flex items-center justify-center flex-shrink-0 group-hover:scale-105 transition-transform\">\n                          <div className=\"text-center\">\n                            <i className=\"fas fa-book text-2xl text-primary mb-1\"></i>\n                            <div className=\"text-xs text-muted-foreground\">Book</div>\n                          </div>\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"font-medium text-lg mb-1 line-clamp-2\">{book.title}</h3>\n                          <p className=\"text-sm text-secondary mb-2\">by {book.author}</p>\n                          <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">{book.description}</p>\n                          <div className=\"flex flex-col space-y-2\">\n                            <Button \n                              size=\"sm\" \n                              className=\"genie-gradient hover:opacity-90 w-full\" \n                              asChild\n                              data-testid={`read-${book.id}`}\n                            >\n                              <a href={book.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                <i className=\"fas fa-book-reader mr-2\"></i>\n                                Read Online\n                              </a>\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"w-full\" \n                              asChild\n                              data-testid={`download-${book.id}`}\n                            >\n                              <a href={book.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                <i className=\"fas fa-download mr-2\"></i>\n                                Download\n                              </a>\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )\n        ))}\n      </div>\n\n      {/* No Books Found */}\n      {filteredBooks.length === 0 && books && (\n        <Card className=\"magical-border fade-in\">\n          <CardContent className=\"p-8 text-center\">\n            <i className=\"fas fa-book-open text-4xl text-muted-foreground mb-4\"></i>\n            <h3 className=\"text-xl font-serif font-semibold mb-2 text-muted-foreground\">\n              No Books Found\n            </h3>\n            <p className=\"text-muted-foreground\">\n              {searchQuery \n                ? \"Try adjusting your search terms to discover new wisdom.\"\n                : \"We're building our library of transformative books for you.\"\n              }\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Reading Benefits Section */}\n      <Card className=\"magical-border mt-12 fade-in\">\n        <CardHeader>\n          <CardTitle className=\"text-center text-xl font-serif text-primary\">\n            The Power of Reading for Wellness\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 text-center\">\n            <div>\n              <div className=\"w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-brain text-green-600 dark:text-green-400 text-xl\"></i>\n              </div>\n              <h3 className=\"font-medium mb-2\">Mental Growth</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Expand your perspective and develop new ways of thinking\n              </p>\n            </div>\n            <div>\n              <div className=\"w-16 h-16 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-heart text-blue-600 dark:text-blue-400 text-xl\"></i>\n              </div>\n              <h3 className=\"font-medium mb-2\">Emotional Healing</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Find comfort and understanding through shared experiences\n              </p>\n            </div>\n            <div>\n              <div className=\"w-16 h-16 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-lightbulb text-purple-600 dark:text-purple-400 text-xl\"></i>\n              </div>\n              <h3 className=\"font-medium mb-2\">Self-Discovery</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Uncover insights about yourself and your potential\n              </p>\n            </div>\n            <div>\n              <div className=\"w-16 h-16 bg-yellow-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-peace text-yellow-600 dark:text-yellow-400 text-xl\"></i>\n              </div>\n              <h3 className=\"font-medium mb-2\">Inner Peace</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Learn techniques for finding calm and balance in life\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"mt-8 text-center\">\n            <blockquote className=\"text-lg font-serif italic text-foreground mb-4\">\n              \"Reading is to the mind what exercise is to the body.\"\n            </blockquote>\n            <cite className=\"text-secondary font-medium\">- Joseph Addison</cite>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13178},"client/src/pages/community.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Community() {\n  const [newPostContent, setNewPostContent] = useState(\"\");\n  const [selectedPost, setSelectedPost] = useState<any>(null);\n  const [commentContent, setCommentContent] = useState(\"\");\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: posts, isLoading: postsLoading } = useQuery({\n    queryKey: [\"/api/community/posts\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/community/posts?limit=50\");\n      return response.json();\n    },\n    enabled: isAuthenticated,\n  });\n\n  const { data: comments } = useQuery({\n    queryKey: [\"/api/community/posts\", selectedPost?.id, \"comments\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/community/posts/${selectedPost.id}/comments`);\n      return response.json();\n    },\n    enabled: !!selectedPost,\n  });\n\n  const createPostMutation = useMutation({\n    mutationFn: async (content: string) => {\n      return await apiRequest(\"POST\", \"/api/community/posts\", { content });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Your post has been shared with the community!\",\n      });\n      setNewPostContent(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create post. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const likeMutation = useMutation({\n    mutationFn: async ({ postId, isLiked }: { postId: string; isLiked: boolean }) => {\n      if (isLiked) {\n        return await apiRequest(\"DELETE\", `/api/community/posts/${postId}/like`);\n      } else {\n        return await apiRequest(\"POST\", `/api/community/posts/${postId}/like`);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update like. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const commentMutation = useMutation({\n    mutationFn: async ({ postId, content }: { postId: string; content: string }) => {\n      return await apiRequest(\"POST\", `/api/community/posts/${postId}/comments`, { content });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Your comment has been posted!\",\n      });\n      setCommentContent(\"\");\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/community/posts\", selectedPost?.id, \"comments\"] \n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to post comment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreatePost = () => {\n    if (!newPostContent.trim()) {\n      toast({\n        title: \"Required\",\n        description: \"Please write something to share.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createPostMutation.mutate(newPostContent);\n  };\n\n  const handleLike = (post: any) => {\n    likeMutation.mutate({\n      postId: post.id,\n      isLiked: post.userLiked,\n    });\n  };\n\n  const handleComment = () => {\n    if (!commentContent.trim()) return;\n    commentMutation.mutate({\n      postId: selectedPost.id,\n      content: commentContent,\n    });\n  };\n\n  const formatRelativeTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    return date.toLocaleDateString();\n  };\n\n  if (isLoading || postsLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n        <div className=\"flex items-center justify-center min-h-96\">\n          <div className=\"w-16 h-16 genie-gradient rounded-full animate-pulse glow-effect flex items-center justify-center\">\n            <i className=\"fas fa-users text-primary-foreground text-xl\"></i>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8 max-w-4xl\">\n      {/* Header */}\n      <div className=\"text-center mb-8 fade-in\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"w-16 h-16 genie-gradient rounded-full flex items-center justify-center glow-effect\">\n            <i className=\"fas fa-users text-primary-foreground text-2xl\"></i>\n          </div>\n        </div>\n        <h1 className=\"text-4xl font-serif font-bold mb-4 genie-gradient bg-clip-text text-transparent\">\n          Healing Community\n        </h1>\n        <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n          Share your journey, support others, and grow together in a safe space of understanding and compassion.\n        </p>\n      </div>\n\n      {/* Create Post */}\n      <Card className=\"magical-border mb-8 fade-in\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"w-10 h-10\">\n              <AvatarImage src={user?.profileImageUrl} />\n              <AvatarFallback className=\"genie-gradient text-primary-foreground\">\n                {user?.firstName?.[0] || user?.email?.[0] || \"U\"}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h3 className=\"font-medium\">Share Your Journey</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                What's on your mind, {user?.firstName || \"friend\"}?\n              </p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Textarea\n            placeholder=\"Share your thoughts, progress, or ask for support...\"\n            value={newPostContent}\n            onChange={(e) => setNewPostContent(e.target.value)}\n            className=\"min-h-20 resize-none\"\n            data-testid=\"new-post-content\"\n          />\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex space-x-2\">\n              <Button variant=\"ghost\" size=\"sm\" disabled>\n                <i className=\"fas fa-image mr-2\"></i>Photo\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" disabled>\n                <i className=\"fas fa-smile mr-2\"></i>Mood\n              </Button>\n            </div>\n            <Button\n              onClick={handleCreatePost}\n              disabled={!newPostContent.trim() || createPostMutation.isPending}\n              className=\"genie-gradient hover:opacity-90\"\n              data-testid=\"create-post\"\n            >\n              {createPostMutation.isPending ? (\n                <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n              ) : (\n                <i className=\"fas fa-paper-plane mr-2\"></i>\n              )}\n              Share\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Posts Feed */}\n      <div className=\"space-y-6\">\n        {!posts || posts.length === 0 ? (\n          <Card className=\"magical-border\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-20 h-20 genie-gradient rounded-full flex items-center justify-center mx-auto mb-4 opacity-50\">\n                <i className=\"fas fa-heart text-primary-foreground text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-serif font-semibold mb-2 text-muted-foreground\">\n                Be the First to Share\n              </h3>\n              <p className=\"text-muted-foreground max-w-md mx-auto\">\n                Start the conversation by sharing your thoughts, experiences, or offering support to the community.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          posts.map((post: any) => (\n            <Card key={post.id} className=\"magical-border hover:glow-effect transition-all fade-in\">\n              <CardContent className=\"p-6\">\n                {/* Post Header */}\n                <div className=\"flex items-start space-x-3 mb-4\">\n                  <Avatar className=\"w-10 h-10\">\n                    <AvatarImage src={post.user?.profileImageUrl} />\n                    <AvatarFallback className=\"genie-gradient text-primary-foreground\">\n                      {post.user?.firstName?.[0] || post.user?.email?.[0] || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <h4 className=\"font-medium\">\n                        {post.user?.firstName || post.user?.email?.split(\"@\")[0] || \"Anonymous\"}\n                      </h4>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        Community Member\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {formatRelativeTime(post.createdAt)}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Post Content */}\n                <div className=\"mb-4\">\n                  <p className=\"text-foreground leading-relaxed whitespace-pre-wrap\">\n                    {post.content}\n                  </p>\n                </div>\n\n                {/* Post Image */}\n                {post.imageUrl && (\n                  <div className=\"mb-4\">\n                    <img\n                      src={post.imageUrl}\n                      alt=\"Post content\"\n                      className=\"rounded-lg max-w-full h-auto\"\n                    />\n                  </div>\n                )}\n\n                {/* Post Actions */}\n                <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n                  <div className=\"flex space-x-6\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleLike(post)}\n                      className={`flex items-center space-x-2 ${\n                        post.userLiked ? \"text-red-500 hover:text-red-600\" : \"text-muted-foreground hover:text-primary\"\n                      }`}\n                      data-testid={`like-post-${post.id}`}\n                    >\n                      <i className={`fas fa-heart ${post.userLiked ? \"text-red-500\" : \"\"}`}></i>\n                      <span>{post.likesCount || 0}</span>\n                    </Button>\n                    <Dialog onOpenChange={(open) => open && setSelectedPost(post)}>\n                      <DialogTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"flex items-center space-x-2 text-muted-foreground hover:text-primary\"\n                          data-testid={`comment-post-${post.id}`}\n                        >\n                          <i className=\"fas fa-comment\"></i>\n                          <span>{post.commentsCount || 0}</span>\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                        <DialogHeader>\n                          <DialogTitle className=\"flex items-center text-primary\">\n                            <i className=\"fas fa-comments mr-2\"></i>\n                            Comments\n                          </DialogTitle>\n                        </DialogHeader>\n                        \n                        {/* Original Post */}\n                        <Card className=\"bg-muted/30\">\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-center space-x-3 mb-3\">\n                              <Avatar className=\"w-8 h-8\">\n                                <AvatarImage src={post.user?.profileImageUrl} />\n                                <AvatarFallback className=\"genie-gradient text-primary-foreground text-xs\">\n                                  {post.user?.firstName?.[0] || \"U\"}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <h4 className=\"font-medium text-sm\">\n                                  {post.user?.firstName || \"Anonymous\"}\n                                </h4>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {formatRelativeTime(post.createdAt)}\n                                </p>\n                              </div>\n                            </div>\n                            <p className=\"text-sm\">{post.content}</p>\n                          </CardContent>\n                        </Card>\n\n                        {/* Comments */}\n                        <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                          {comments?.map((comment: any) => (\n                            <div key={comment.id} className=\"flex items-start space-x-3\">\n                              <Avatar className=\"w-8 h-8\">\n                                <AvatarImage src={comment.user?.profileImageUrl} />\n                                <AvatarFallback className=\"genie-gradient text-primary-foreground text-xs\">\n                                  {comment.user?.firstName?.[0] || \"U\"}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div className=\"flex-1\">\n                                <div className=\"bg-muted rounded-lg p-3\">\n                                  <div className=\"flex items-center space-x-2 mb-1\">\n                                    <h4 className=\"font-medium text-sm\">\n                                      {comment.user?.firstName || \"Anonymous\"}\n                                    </h4>\n                                    <span className=\"text-xs text-muted-foreground\">\n                                      {formatRelativeTime(comment.createdAt)}\n                                    </span>\n                                  </div>\n                                  <p className=\"text-sm\">{comment.content}</p>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Add Comment */}\n                        <div className=\"flex space-x-3 pt-4 border-t\">\n                          <Avatar className=\"w-8 h-8\">\n                            <AvatarImage src={user?.profileImageUrl} />\n                            <AvatarFallback className=\"genie-gradient text-primary-foreground text-xs\">\n                              {user?.firstName?.[0] || \"U\"}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 space-y-2\">\n                            <Textarea\n                              placeholder=\"Write a supportive comment...\"\n                              value={commentContent}\n                              onChange={(e) => setCommentContent(e.target.value)}\n                              className=\"min-h-20 resize-none\"\n                              data-testid=\"comment-input\"\n                            />\n                            <Button\n                              onClick={handleComment}\n                              disabled={!commentContent.trim() || commentMutation.isPending}\n                              size=\"sm\"\n                              className=\"genie-gradient hover:opacity-90\"\n                              data-testid=\"post-comment\"\n                            >\n                              {commentMutation.isPending ? (\n                                <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                              ) : (\n                                <i className=\"fas fa-paper-plane mr-2\"></i>\n                              )}\n                              Comment\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-primary hover:text-primary/80\"\n                    data-testid={`support-post-${post.id}`}\n                  >\n                    <i className=\"fas fa-hands-helping mr-2\"></i>\n                    Send Support\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":19092},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport BreathingExercise from \"@/components/BreathingExercise\";\nimport AICompanion from \"@/components/AICompanion\";\nimport JournalEditor from \"@/components/JournalEditor\";\nimport MoodTracker from \"@/components/MoodTracker\";\nimport MediaSection from \"@/components/MediaSection\";\nimport { Link } from \"wouter\";\nimport { useEffect, useState } from \"react\";\n\ninterface Quote {\n  quote: string;\n  author: string;\n  theme: string;\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [currentQuote, setCurrentQuote] = useState<Quote | null>(null);\n\n  const { data: quote } = useQuery({\n    queryKey: [\"/api/content/quote\"],\n    refetchInterval: 300000, // Refresh every 5 minutes\n  });\n\n  const { data: communityPosts } = useQuery({\n    queryKey: [\"/api/community/posts\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/community/posts?limit=3\");\n      return response.json();\n    },\n  });\n\n  useEffect(() => {\n    if (quote && typeof quote === 'object') {\n      setCurrentQuote(quote as Quote);\n    }\n  }, [quote]);\n\n  const userName = (user as any)?.firstName || (user as any)?.email?.split(\"@\")[0] || \"Friend\";\n\n  return (\n    <main className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n      {/* Welcome Section */}\n      <section className=\"mb-12 fade-in\">\n        <div className=\"text-center mb-8\">\n          <h2 className=\"text-4xl font-serif font-bold mb-4 genie-gradient bg-clip-text text-transparent\">\n            Welcome back, {userName}! ✨\n          </h2>\n          <p className=\"text-muted-foreground text-lg\">Your magical wellness journey continues today</p>\n        </div>\n\n        {/* Motivational Quote */}\n        {currentQuote && (\n          <Card className=\"magical-border glow-effect mb-8\">\n            <CardContent className=\"relative p-8\">\n              <div className=\"absolute inset-0 rounded-2xl bg-gradient-to-br from-primary/20 via-accent/10 to-secondary/20\"></div>\n              <div className=\"relative z-10 text-center\">\n                <blockquote className=\"text-2xl font-serif italic mb-4 text-primary-foreground\">\n                  \"{currentQuote.quote}\"\n                </blockquote>\n                <cite className=\"text-secondary font-medium\">- {currentQuote.author}</cite>\n              </div>\n              <div className=\"absolute top-4 right-4 text-secondary\">\n                <i className=\"fas fa-quote-right text-2xl opacity-30\"></i>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </section>\n\n      {/* Breathing Exercise */}\n      <section className=\"mb-12 fade-in\">\n        <BreathingExercise />\n      </section>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Left Column */}\n        <div className=\"lg:col-span-2 space-y-8\">\n          {/* Quick Journal */}\n          <section className=\"fade-in\">\n            <Card className=\"magical-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-serif font-semibold text-primary flex items-center\">\n                    <i className=\"fas fa-feather-alt mr-2\"></i>\n                    Quick Journal Entry\n                  </h3>\n                  <Link href=\"/journal\">\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"view-journal\">\n                      <i className=\"fas fa-external-link-alt mr-2\"></i>\n                      Full Journal\n                    </Button>\n                  </Link>\n                </div>\n                <JournalEditor simplified={true} />\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Media Recommendations Preview */}\n          <section className=\"fade-in\">\n            <MediaSection preview={true} />\n          </section>\n        </div>\n\n        {/* Right Column */}\n        <div className=\"space-y-8\">\n          {/* AI Companion */}\n          <section className=\"fade-in\">\n            <AICompanion />\n          </section>\n\n          {/* Quick Actions */}\n          <section className=\"fade-in\">\n            <Card className=\"magical-border\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-serif font-semibold text-primary mb-4\">Quick Actions</h3>\n                <div className=\"space-y-3\">\n                  <Link href=\"/community\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-start\" \n                      data-testid=\"quick-community\"\n                    >\n                      <i className=\"fas fa-users text-primary mr-3\"></i>\n                      Community Feed\n                    </Button>\n                  </Link>\n                  <Link href=\"/books\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-start\" \n                      data-testid=\"quick-books\"\n                    >\n                      <i className=\"fas fa-book-open text-secondary mr-3\"></i>\n                      Self-Help Library\n                    </Button>\n                  </Link>\n                  <Link href=\"/shopping\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-start\" \n                      data-testid=\"quick-shopping\"\n                    >\n                      <i className=\"fas fa-shopping-bag text-accent mr-3\"></i>\n                      Comfort Shopping\n                    </Button>\n                  </Link>\n                  <Link href=\"/profile\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-start\" \n                      data-testid=\"quick-profile\"\n                    >\n                      <i className=\"fas fa-user-circle text-primary mr-3\"></i>\n                      Profile Settings\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Mood Tracker */}\n          <section className=\"fade-in\">\n            <MoodTracker />\n          </section>\n        </div>\n      </div>\n\n      {/* Community Feed Preview */}\n      {communityPosts && communityPosts.length > 0 && (\n        <section className=\"mt-12 fade-in\">\n          <Card className=\"magical-border\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-serif font-semibold text-primary flex items-center\">\n                  <i className=\"fas fa-heart mr-2\"></i>\n                  Community Support\n                </h3>\n                <Link href=\"/community\">\n                  <Button variant=\"outline\" data-testid=\"view-community\">\n                    View All\n                  </Button>\n                </Link>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {communityPosts.slice(0, 3).map((post: any) => (\n                  <Card key={post.id} className=\"hover:bg-accent/5 transition-colors\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-2 mb-3\">\n                        <div className=\"w-8 h-8 genie-gradient rounded-full flex items-center justify-center\">\n                          <span className=\"text-primary-foreground text-xs font-medium\">\n                            {post.user?.firstName?.[0] || post.user?.email?.[0] || \"U\"}\n                          </span>\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-sm\">\n                            {post.user?.firstName || post.user?.email?.split(\"@\")[0] || \"Anonymous\"}\n                          </h4>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(post.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <p className=\"text-sm mb-3 line-clamp-3\">{post.content}</p>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex space-x-4\">\n                          <button className=\"flex items-center space-x-1 text-xs text-muted-foreground hover:text-primary transition-colors\">\n                            <i className=\"fas fa-heart\"></i>\n                            <span>{post.likesCount || 0}</span>\n                          </button>\n                          <button className=\"flex items-center space-x-1 text-xs text-muted-foreground hover:text-primary transition-colors\">\n                            <i className=\"fas fa-comment\"></i>\n                            <span>{post.commentsCount || 0}</span>\n                          </button>\n                        </div>\n                        <button className=\"text-xs text-primary hover:text-primary/80 transition-colors\">\n                          Send Support\n                        </button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n      )}\n\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-20 md:bottom-6 right-6 z-40\">\n        <Link href=\"/journal\">\n          <Button\n            size=\"lg\"\n            className=\"w-14 h-14 genie-gradient rounded-full shadow-2xl hover:scale-110 transition-transform glow-effect\"\n            data-testid=\"fab-journal\"\n          >\n            <i className=\"fas fa-plus text-primary-foreground text-xl\"></i>\n          </Button>\n        </Link>\n      </div>\n    </main>\n  );\n}\n","size_bytes":10090},"client/src/pages/games.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Games() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: games } = useQuery({\n    queryKey: [\"/api/games\"],\n  });\n\n  const filteredGames = games?.filter((game: any) =>\n    game.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    game.description.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const gameCategories = [\n    {\n      name: \"Relaxation\",\n      games: filteredGames.filter((g: any) => [\"puzzle-piece\", \"leaf\", \"palette\"].includes(g.icon)),\n      color: \"bg-green-500/20 text-green-600 dark:text-green-400\",\n      icon: \"fas fa-leaf\"\n    },\n    {\n      name: \"Mindfulness\", \n      games: filteredGames.filter((g: any) => [\"circle\", \"seedling\"].includes(g.icon)),\n      color: \"bg-blue-500/20 text-blue-600 dark:text-blue-400\",\n      icon: \"fas fa-circle\"\n    },\n    {\n      name: \"Creative\",\n      games: filteredGames.filter((g: any) => ![\"puzzle-piece\", \"leaf\", \"palette\", \"circle\", \"seedling\"].includes(g.icon)),\n      color: \"bg-purple-500/20 text-purple-600 dark:text-purple-400\",\n      icon: \"fas fa-paint-brush\"\n    },\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n      {/* Header */}\n      <div className=\"text-center mb-8 fade-in\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"w-16 h-16 genie-gradient rounded-full flex items-center justify-center glow-effect\">\n            <i className=\"fas fa-gamepad text-primary-foreground text-2xl\"></i>\n          </div>\n        </div>\n        <h1 className=\"text-4xl font-serif font-bold mb-4 genie-gradient bg-clip-text text-transparent\">\n          Healing Games\n        </h1>\n        <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n          Discover calming, mood-lifting games designed to bring joy, reduce stress, and create moments of peace in your day.\n        </p>\n      </div>\n\n      {/* Search */}\n      <Card className=\"magical-border mb-8 fade-in\">\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n            <Input\n              placeholder=\"Search for games...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-games\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Featured Game */}\n      <Card className=\"magical-border glow-effect mb-8 fade-in\">\n        <CardHeader>\n          <CardTitle className=\"text-center text-xl font-serif text-primary flex items-center justify-center\">\n            <i className=\"fas fa-star mr-2\"></i>\n            ✨ Featured Game ✨\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-6 max-w-2xl mx-auto\">\n            <div className=\"w-24 h-24 genie-gradient rounded-2xl flex items-center justify-center\">\n              <i className=\"fas fa-puzzle-piece text-primary-foreground text-3xl\"></i>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-2xl font-serif font-semibold mb-2\">Peaceful Puzzles</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Immerse yourself in beautiful, calming jigsaw puzzles featuring serene landscapes and inspiring imagery. \n                Perfect for mindful moments and gentle mental exercise.\n              </p>\n              <div className=\"flex space-x-2 mb-4\">\n                <Badge className=\"bg-green-500/20 text-green-600 dark:text-green-400\">Relaxing</Badge>\n                <Badge className=\"bg-blue-500/20 text-blue-600 dark:text-blue-400\">Mindful</Badge>\n                <Badge className=\"bg-purple-500/20 text-purple-600 dark:text-purple-400\">Creative</Badge>\n              </div>\n              <Button className=\"genie-gradient hover:opacity-90\" asChild data-testid=\"play-featured\">\n                <a href=\"https://www.jigsawplanet.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  <i className=\"fas fa-play mr-2\"></i>\n                  Play Now\n                </a>\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Game Categories */}\n      <div className=\"space-y-8\">\n        {gameCategories.map((category) => (\n          category.games.length > 0 && (\n            <div key={category.name} className=\"fade-in\">\n              <div className=\"flex items-center mb-6\">\n                <div className={`w-12 h-12 ${category.color} rounded-lg flex items-center justify-center mr-4`}>\n                  <i className={`${category.icon} text-lg`}></i>\n                </div>\n                <div>\n                  <h2 className=\"text-2xl font-serif font-semibold text-primary\">{category.name}</h2>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {category.games.length} game{category.games.length !== 1 ? 's' : ''} available\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {category.games.map((game: any) => (\n                  <Card key={game.id} className=\"hover:magical-border hover:glow-effect transition-all group\" data-testid={`game-${game.id}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-16 h-16 genie-gradient rounded-xl flex items-center justify-center group-hover:scale-105 transition-transform\">\n                          <i className={`fas fa-${game.icon} text-primary-foreground text-xl`}></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-medium text-lg mb-1\">{game.title}</h3>\n                          <p className=\"text-sm text-muted-foreground mb-3\">{game.description}</p>\n                          <Button \n                            size=\"sm\" \n                            className=\"genie-gradient hover:opacity-90\" \n                            asChild\n                            data-testid={`play-${game.id}`}\n                          >\n                            <a href={game.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                              <i className=\"fas fa-play mr-2\"></i>\n                              Play\n                            </a>\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )\n        ))}\n      </div>\n\n      {/* No Games Found */}\n      {filteredGames.length === 0 && games && (\n        <Card className=\"magical-border fade-in\">\n          <CardContent className=\"p-8 text-center\">\n            <i className=\"fas fa-gamepad text-4xl text-muted-foreground mb-4\"></i>\n            <h3 className=\"text-xl font-serif font-semibold mb-2 text-muted-foreground\">\n              No Games Found\n            </h3>\n            <p className=\"text-muted-foreground\">\n              {searchQuery \n                ? \"Try adjusting your search terms to find the perfect game for you.\"\n                : \"We're working on adding more healing games to your collection.\"\n              }\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Benefits Section */}\n      <Card className=\"magical-border mt-12 fade-in\">\n        <CardHeader>\n          <CardTitle className=\"text-center text-xl font-serif text-primary\">\n            Why Play Healing Games?\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-center\">\n            <div>\n              <div className=\"w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-brain text-green-600 dark:text-green-400 text-xl\"></i>\n              </div>\n              <h3 className=\"font-medium mb-2\">Mental Wellness</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Gentle cognitive exercises that promote focus and mental clarity\n              </p>\n            </div>\n            <div>\n              <div className=\"w-16 h-16 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-heart text-blue-600 dark:text-blue-400 text-xl\"></i>\n              </div>\n              <h3 className=\"font-medium mb-2\">Stress Relief</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Calming activities that help reduce anxiety and promote relaxation\n              </p>\n            </div>\n            <div>\n              <div className=\"w-16 h-16 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-smile text-purple-600 dark:text-purple-400 text-xl\"></i>\n              </div>\n              <h3 className=\"font-medium mb-2\">Mood Boost</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Engaging experiences designed to lift your spirits and bring joy\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9789},"client/src/pages/journal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport JournalEditor from \"@/components/JournalEditor\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Journal() {\n  const [selectedEntry, setSelectedEntry] = useState<any>(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: journalEntries, isLoading: entriesLoading } = useQuery({\n    queryKey: [\"/api/journal\"],\n    enabled: isAuthenticated,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (entryId: string) => {\n      return await apiRequest(\"DELETE\", `/api/journal/${entryId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Journal entry deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/journal\"] });\n      setSelectedEntry(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete journal entry.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredEntries = (journalEntries as any[])?.filter((entry: any) =>\n    entry.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    entry.content.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const getMoodEmoji = (mood: string) => {\n    switch (mood) {\n      case \"very_happy\": return \"😄\";\n      case \"happy\": return \"😊\";\n      case \"neutral\": return \"😐\";\n      case \"sad\": return \"😔\";\n      case \"very_sad\": return \"😢\";\n      default: return \"✨\";\n    }\n  };\n\n  const getMoodColor = (mood: string) => {\n    switch (mood) {\n      case \"very_happy\": return \"bg-green-500/20 text-green-600 dark:text-green-400\";\n      case \"happy\": return \"bg-blue-500/20 text-blue-600 dark:text-blue-400\";\n      case \"neutral\": return \"bg-yellow-500/20 text-yellow-600 dark:text-yellow-400\";\n      case \"sad\": return \"bg-orange-500/20 text-orange-600 dark:text-orange-400\";\n      case \"very_sad\": return \"bg-red-500/20 text-red-600 dark:text-red-400\";\n      default: return \"bg-primary/20 text-primary\";\n    }\n  };\n\n  if (isLoading || entriesLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n        <div className=\"flex items-center justify-center min-h-96\">\n          <div className=\"w-16 h-16 genie-gradient rounded-full animate-pulse glow-effect flex items-center justify-center\">\n            <i className=\"fas fa-feather-alt text-primary-foreground text-xl\"></i>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n      {/* Header */}\n      <div className=\"text-center mb-8 fade-in\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"w-16 h-16 genie-gradient rounded-full flex items-center justify-center glow-effect\">\n            <i className=\"fas fa-feather-alt text-primary-foreground text-2xl\"></i>\n          </div>\n        </div>\n        <h1 className=\"text-4xl font-serif font-bold mb-4 genie-gradient bg-clip-text text-transparent\">\n          Your Magical Journal\n        </h1>\n        <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n          Capture your thoughts, feelings, and magical moments. Let your inner wisdom flow onto the pages.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Sidebar - Entry List */}\n        <div className=\"lg:col-span-1 space-y-6\">\n          {/* Search */}\n          <Card className=\"magical-border\">\n            <CardContent className=\"p-4\">\n              <div className=\"relative\">\n                <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n                <Input\n                  placeholder=\"Search your entries...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"search-entries\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* New Entry Button */}\n          <Button\n            onClick={() => {\n              setSelectedEntry(null);\n              setIsEditing(true);\n            }}\n            className=\"w-full genie-gradient hover:opacity-90 py-6 text-lg\"\n            data-testid=\"new-entry-button\"\n          >\n            <i className=\"fas fa-plus mr-2\"></i>\n            New Journal Entry\n          </Button>\n\n          {/* Entries List */}\n          <div className=\"space-y-4\">\n            {filteredEntries.length === 0 ? (\n              <Card className=\"magical-border\">\n                <CardContent className=\"p-6 text-center\">\n                  <i className=\"fas fa-feather-alt text-4xl text-muted-foreground mb-4\"></i>\n                  <p className=\"text-muted-foreground\">\n                    {searchQuery ? \"No entries match your search\" : \"Start your first journal entry\"}\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              filteredEntries.map((entry: any) => (\n                <Card\n                  key={entry.id}\n                  className={`cursor-pointer transition-all hover:glow-effect ${\n                    selectedEntry?.id === entry.id ? \"magical-border glow-effect\" : \"border-border hover:border-primary/30\"\n                  }`}\n                  onClick={() => {\n                    setSelectedEntry(entry);\n                    setIsEditing(false);\n                  }}\n                  data-testid={`entry-${entry.id}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-lg\">{getMoodEmoji(entry.mood)}</span>\n                        <h3 className=\"font-medium text-sm line-clamp-1\">\n                          {entry.title || \"Untitled Entry\"}\n                        </h3>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(entry.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground line-clamp-2 mb-2\">\n                      {entry.content}\n                    </p>\n                    {entry.mood && (\n                      <Badge variant=\"secondary\" className={`text-xs ${getMoodColor(entry.mood)}`}>\n                        {getMoodEmoji(entry.mood)} {entry.mood.replace(\"_\", \" \")}\n                      </Badge>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"magical-border min-h-[600px]\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center text-primary\">\n                  <i className=\"fas fa-scroll mr-2\"></i>\n                  {isEditing ? \"Write New Entry\" : selectedEntry ? \"Journal Entry\" : \"Select an Entry\"}\n                </CardTitle>\n                {selectedEntry && !isEditing && (\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setIsEditing(true)}\n                      data-testid=\"edit-entry\"\n                    >\n                      <i className=\"fas fa-edit mr-2\"></i>\n                      Edit\n                    </Button>\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button variant=\"outline\" size=\"sm\" data-testid=\"delete-entry\">\n                          <i className=\"fas fa-trash mr-2\"></i>\n                          Delete\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete Entry</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete this journal entry? This action cannot be undone.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={() => deleteMutation.mutate(selectedEntry.id)}\n                            className=\"bg-destructive hover:bg-destructive/90\"\n                          >\n                            Delete\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              {isEditing ? (\n                <JournalEditor\n                  entry={selectedEntry}\n                  onSave={() => {\n                    setIsEditing(false);\n                    if (selectedEntry) {\n                      // Refresh the selected entry data\n                      queryClient.invalidateQueries({ queryKey: [\"/api/journal\"] });\n                    } else {\n                      setSelectedEntry(null);\n                    }\n                  }}\n                />\n              ) : selectedEntry ? (\n                <div className=\"space-y-6\">\n                  {/* Entry Header */}\n                  <div className=\"border-b border-border pb-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h2 className=\"text-2xl font-serif font-semibold\">\n                        {selectedEntry.title || \"Untitled Entry\"}\n                      </h2>\n                      <div className=\"flex items-center space-x-2\">\n                        {selectedEntry.mood && (\n                          <Badge className={getMoodColor(selectedEntry.mood)}>\n                            {getMoodEmoji(selectedEntry.mood)} {selectedEntry.mood.replace(\"_\", \" \")}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Created on {new Date(selectedEntry.createdAt).toLocaleDateString()} at{\" \"}\n                      {new Date(selectedEntry.createdAt).toLocaleTimeString()}\n                    </p>\n                    {selectedEntry.updatedAt !== selectedEntry.createdAt && (\n                      <p className=\"text-xs text-muted-foreground\">\n                        Last updated on {new Date(selectedEntry.updatedAt).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Entry Content */}\n                  <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n                    <div className=\"whitespace-pre-wrap text-foreground leading-relaxed\">\n                      {selectedEntry.content}\n                    </div>\n                  </div>\n\n                  {/* Tags */}\n                  {selectedEntry.tags && selectedEntry.tags.length > 0 && (\n                    <div className=\"pt-4 border-t border-border\">\n                      <h4 className=\"text-sm font-medium mb-2 text-muted-foreground\">Tags</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {selectedEntry.tags.map((tag: string, index: number) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                            #{tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-64 text-center\">\n                  <div className=\"w-24 h-24 genie-gradient rounded-full flex items-center justify-center mb-6 opacity-50\">\n                    <i className=\"fas fa-book-open text-primary-foreground text-2xl\"></i>\n                  </div>\n                  <h3 className=\"text-xl font-serif font-semibold mb-2 text-muted-foreground\">\n                    Your Journal Awaits\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4 max-w-md\">\n                    Select an entry from the sidebar to read, or create a new one to capture your thoughts.\n                  </p>\n                  <Button\n                    onClick={() => setIsEditing(true)}\n                    className=\"genie-gradient hover:opacity-90\"\n                    data-testid=\"start-writing\"\n                  >\n                    <i className=\"fas fa-pen mr-2\"></i>\n                    Start Writing\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14943},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n        {/* Background Effects */}\n        <div className=\"absolute inset-0 genie-gradient opacity-20\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-br from-background/80 to-background/60\"></div>\n        \n        {/* Floating Elements */}\n        <div className=\"absolute top-20 left-20 w-4 h-4 bg-secondary/30 rounded-full float\"></div>\n        <div className=\"absolute top-40 right-32 w-6 h-6 bg-primary/20 rounded-full float\" style={{ animationDelay: '1s' }}></div>\n        <div className=\"absolute bottom-32 left-40 w-3 h-3 bg-accent/25 rounded-full float\" style={{ animationDelay: '2s' }}></div>\n\n        {/* Main Content */}\n        <div className=\"relative z-10 text-center max-w-4xl mx-auto px-6\">\n          {/* Logo */}\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"w-24 h-24 genie-gradient rounded-full flex items-center justify-center glow-effect\">\n              <i className=\"fas fa-magic text-primary-foreground text-3xl\"></i>\n            </div>\n          </div>\n\n          {/* Title */}\n          <h1 className=\"text-6xl md:text-8xl font-serif font-bold mb-6\">\n            <span className=\"genie-gradient bg-clip-text text-transparent\">MindBloom</span>\n          </h1>\n\n          {/* Subtitle */}\n          <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-2xl mx-auto leading-relaxed\">\n            Your magical wellness companion powered by AI. Transform your mental health journey with \n            personalized support, community connection, and ancient wisdom.\n          </p>\n\n          {/* Features */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12 max-w-3xl mx-auto\">\n            <Card className=\"magical-border bg-card/50 backdrop-blur-sm\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 genie-gradient rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-robot text-primary-foreground\"></i>\n                </div>\n                <h3 className=\"font-serif font-semibold mb-2\">AI Genie Guide</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your personal AI companion offering 24/7 support and wisdom\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"magical-border bg-card/50 backdrop-blur-sm\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 genie-gradient rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-users text-primary-foreground\"></i>\n                </div>\n                <h3 className=\"font-serif font-semibold mb-2\">Healing Community</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Connect with others on similar journeys of growth and healing\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"magical-border bg-card/50 backdrop-blur-sm\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 genie-gradient rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-heart text-primary-foreground\"></i>\n                </div>\n                <h3 className=\"font-serif font-semibold mb-2\">Holistic Wellness</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Journal, meditate, track moods, and discover uplifting content\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* CTA */}\n          <Button\n            size=\"lg\"\n            className=\"genie-gradient hover:opacity-90 transition-opacity text-lg px-8 py-6 glow-effect\"\n            asChild\n            data-testid=\"login-button\"\n          >\n            <a href=\"/api/login\">\n              <i className=\"fas fa-sparkles mr-2\"></i>\n              Begin Your Journey\n            </a>\n          </Button>\n\n          <p className=\"text-sm text-muted-foreground mt-4\">\n            Free to start • No credit card required • Secure authentication\n          </p>\n        </div>\n      </section>\n\n      {/* Features Detail Section */}\n      <section className=\"py-20 px-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-serif font-bold mb-6 genie-gradient bg-clip-text text-transparent\">\n              Everything You Need for Mental Wellness\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              MindBloom combines cutting-edge AI with proven wellness practices to create \n              a magical experience tailored just for you.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[\n              { icon: \"fas fa-feather-alt\", title: \"Smart Journaling\", desc: \"AI-powered insights from your daily reflections\" },\n              { icon: \"fas fa-wind\", title: \"Breathing Exercises\", desc: \"Guided meditation and mindfulness practices\" },\n              { icon: \"fas fa-chart-line\", title: \"Mood Tracking\", desc: \"Visualize your emotional journey over time\" },\n              { icon: \"fas fa-book-open\", title: \"Wisdom Library\", desc: \"Curated self-help books and inspiring content\" },\n              { icon: \"fas fa-gamepad\", title: \"Healing Games\", desc: \"Fun activities designed to boost your mood\" },\n              { icon: \"fas fa-shopping-bag\", title: \"Comfort Shopping\", desc: \"Positive distractions and self-care suggestions\" },\n            ].map((feature, index) => (\n              <Card key={index} className=\"magical-border hover:glow-effect transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"w-12 h-12 genie-gradient rounded-full flex items-center justify-center mb-4\">\n                    <i className={`${feature.icon} text-primary-foreground`}></i>\n                  </div>\n                  <h3 className=\"font-serif font-semibold text-lg mb-2\">{feature.title}</h3>\n                  <p className=\"text-muted-foreground\">{feature.desc}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-6 bg-card/20\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-4xl font-serif font-bold mb-6\">\n            Ready to Transform Your Wellness Journey?\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Join thousands of users who have discovered the magic of mindful living\n          </p>\n          <Button\n            size=\"lg\"\n            className=\"genie-gradient hover:opacity-90 transition-opacity text-lg px-8 py-6 glow-effect\"\n            asChild\n            data-testid=\"cta-login-button\"\n          >\n            <a href=\"/api/login\">\n              <i className=\"fas fa-magic mr-2\"></i>\n              Start Your Free Journey\n            </a>\n          </Button>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":7545},"client/src/pages/media.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Media() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"movies\");\n\n  const { data: movies } = useQuery({\n    queryKey: [\"/api/media/movies\"],\n  });\n\n  const { data: music } = useQuery({\n    queryKey: [\"/api/media/music\"],\n  });\n\n  const { data: tedTalks } = useQuery({\n    queryKey: [\"/api/media/ted-talks\"],\n  });\n\n  const filterItems = (items: any[]) => {\n    if (!searchQuery) return items || [];\n    return items?.filter(item =>\n      item.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.artist?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.speaker?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.genre?.toLowerCase().includes(searchQuery.toLowerCase())\n    ) || [];\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n      {/* Header */}\n      <div className=\"text-center mb-8 fade-in\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"w-16 h-16 genie-gradient rounded-full flex items-center justify-center glow-effect\">\n            <i className=\"fas fa-play-circle text-primary-foreground text-2xl\"></i>\n          </div>\n        </div>\n        <h1 className=\"text-4xl font-serif font-bold mb-4 genie-gradient bg-clip-text text-transparent\">\n          Uplifting Media\n        </h1>\n        <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n          Discover inspiring movies, uplifting music, and motivational talks to brighten your day and nourish your soul.\n        </p>\n      </div>\n\n      {/* Search */}\n      <Card className=\"magical-border mb-8 fade-in\">\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n            <Input\n              placeholder=\"Search movies, music, speakers, or topics...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-media\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 mb-8\">\n          <TabsTrigger value=\"movies\" className=\"flex items-center\" data-testid=\"tab-movies\">\n            <i className=\"fas fa-film mr-2\"></i>\n            Movies\n          </TabsTrigger>\n          <TabsTrigger value=\"music\" className=\"flex items-center\" data-testid=\"tab-music\">\n            <i className=\"fas fa-music mr-2\"></i>\n            Music\n          </TabsTrigger>\n          <TabsTrigger value=\"tedtalks\" className=\"flex items-center\" data-testid=\"tab-talks\">\n            <i className=\"fas fa-video mr-2\"></i>\n            TED Talks\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Movies */}\n        <TabsContent value=\"movies\" className=\"fade-in\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6\">\n            {filterItems(movies || []).map((movie) => (\n              <Card key={movie.id} className=\"group hover:magical-border hover:glow-effect transition-all cursor-pointer\" data-testid={`movie-${movie.id}`}>\n                <div className=\"aspect-[2/3] overflow-hidden rounded-t-lg\">\n                  <div className=\"w-full h-full bg-gradient-to-br from-accent/20 to-primary/20 group-hover:scale-105 transition-transform flex items-center justify-center\">\n                    <img \n                      src={movie.thumbnail} \n                      alt={`${movie.title} poster`}\n                      className=\"w-full h-full object-cover\"\n                      onError={(e) => {\n                        const target = e.target as HTMLImageElement;\n                        target.style.display = 'none';\n                        target.nextElementSibling?.classList.remove('hidden');\n                      }}\n                    />\n                    <div className=\"hidden w-full h-full flex items-center justify-center bg-gradient-to-br from-accent/20 to-primary/20\">\n                      <i className=\"fas fa-play text-6xl text-primary/50\"></i>\n                    </div>\n                  </div>\n                </div>\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-medium text-sm line-clamp-2 mb-2\">{movie.title}</h3>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {movie.genre}\n                  </Badge>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n          \n          {filterItems(movies || []).length === 0 && (\n            <Card className=\"magical-border\">\n              <CardContent className=\"p-8 text-center\">\n                <i className=\"fas fa-film text-4xl text-muted-foreground mb-4\"></i>\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No movies match your search\" : \"Loading inspiring movies...\"}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Music */}\n        <TabsContent value=\"music\" className=\"fade-in\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filterItems(music || []).map((song) => (\n              <Card key={song.id} className=\"group hover:magical-border hover:glow-effect transition-all\" data-testid={`song-${song.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform\">\n                      <i className=\"fas fa-music text-primary-foreground text-xl\"></i>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-medium line-clamp-1 mb-1\">{song.title}</h3>\n                      <p className=\"text-sm text-muted-foreground mb-2\">{song.artist}</p>\n                      <Badge className=\"text-xs genie-gradient\">\n                        {song.mood}\n                      </Badge>\n                    </div>\n                    <Button size=\"sm\" variant=\"ghost\" className=\"hover:bg-primary hover:text-primary-foreground\" asChild>\n                      <a href={song.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fas fa-play\"></i>\n                      </a>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {filterItems(music || []).length === 0 && (\n            <Card className=\"magical-border\">\n              <CardContent className=\"p-8 text-center\">\n                <i className=\"fas fa-music text-4xl text-muted-foreground mb-4\"></i>\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No music matches your search\" : \"Loading uplifting music...\"}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* TED Talks */}\n        <TabsContent value=\"tedtalks\" className=\"fade-in\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {filterItems(tedTalks || []).map((talk) => (\n              <Card key={talk.id} className=\"group hover:magical-border hover:glow-effect transition-all\" data-testid={`talk-${talk.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-20 h-20 bg-gradient-to-br from-secondary to-primary rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform flex-shrink-0\">\n                      <i className=\"fas fa-video text-primary-foreground text-xl\"></i>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-medium line-clamp-2 mb-2\">{talk.title}</h3>\n                      <p className=\"text-sm text-muted-foreground mb-2\">{talk.speaker}</p>\n                      <div className=\"flex items-center justify-between\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          <i className=\"fas fa-clock mr-1\"></i>\n                          {talk.duration}\n                        </Badge>\n                        <Button size=\"sm\" className=\"genie-gradient hover:opacity-90\" asChild>\n                          <a href={talk.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            <i className=\"fas fa-external-link-alt mr-2\"></i>\n                            Watch\n                          </a>\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {filterItems(tedTalks || []).length === 0 && (\n            <Card className=\"magical-border\">\n              <CardContent className=\"p-8 text-center\">\n                <i className=\"fas fa-video text-4xl text-muted-foreground mb-4\"></i>\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? \"No TED talks match your search\" : \"Loading inspiring TED talks...\"}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Featured Section */}\n      <Card className=\"magical-border glow-effect mt-12 fade-in\">\n        <CardHeader>\n          <CardTitle className=\"text-center text-xl font-serif text-primary flex items-center justify-center\">\n            <i className=\"fas fa-star mr-2\"></i>\n            ✨ Daily Inspiration ✨\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center max-w-2xl mx-auto\">\n            <blockquote className=\"text-lg font-serif italic mb-4 text-foreground\">\n              \"The only way to make sense out of change is to plunge into it, move with it, and join the dance.\"\n            </blockquote>\n            <cite className=\"text-secondary font-medium\">- Alan Watts</cite>\n            <p className=\"text-sm text-muted-foreground mt-4\">\n              Explore more wisdom in our curated collection of transformative content.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10996},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst profileSchema = z.object({\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  theme: z.enum([\"light\", \"dark\", \"system\"]).optional(),\n  language: z.string().optional(),\n});\n\ntype ProfileFormValues = z.infer<typeof profileSchema>;\n\nconst languages = [\n  { code: \"en\", name: \"English\" },\n  { code: \"es\", name: \"Español\" },\n  { code: \"fr\", name: \"Français\" },\n  { code: \"ar\", name: \"العربية\" },\n  { code: \"zh\", name: \"中文\" },\n  { code: \"hi\", name: \"हिंदी\" },\n  { code: \"de\", name: \"Deutsch\" },\n  { code: \"it\", name: \"Italiano\" },\n  { code: \"pt\", name: \"Português\" },\n  { code: \"ru\", name: \"Русский\" },\n];\n\nconst avatarOptions = [\n  \"🧙‍♀️\", \"🧙‍♂️\", \"🌟\", \"✨\", \"🦋\", \"🌸\", \"🌙\", \"💫\", \"🕊️\", \"🌺\",\n  \"🦄\", \"🐙\", \"🦊\", \"🐨\", \"🐼\", \"🦁\", \"🐸\", \"🦉\", \"🌈\", \"🎭\"\n];\n\nexport default function Profile() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedAvatar, setSelectedAvatar] = useState(\"🌟\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const form = useForm<ProfileFormValues>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      theme: user?.theme as \"light\" | \"dark\" | \"system\" || \"dark\",\n      language: user?.language || \"en\",\n    },\n  });\n\n  // Update form when user data loads\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        theme: user.theme as \"light\" | \"dark\" | \"system\" || \"dark\",\n        language: user.language || \"en\",\n      });\n    }\n  }, [user, form]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileFormValues) => {\n      return await apiRequest(\"PATCH\", \"/api/user/profile\", data);\n    },\n    onSuccess: (response) => {\n      toast({\n        title: \"Success\",\n        description: \"Your profile has been updated!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      // Update theme immediately if changed\n      const formData = form.getValues();\n      if (formData.theme && formData.theme !== theme) {\n        setTheme(formData.theme);\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProfileFormValues) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n        <div className=\"flex items-center justify-center min-h-96\">\n          <div className=\"w-16 h-16 genie-gradient rounded-full animate-pulse glow-effect flex items-center justify-center\">\n            <i className=\"fas fa-user text-primary-foreground text-xl\"></i>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8 max-w-4xl\">\n      {/* Header */}\n      <div className=\"text-center mb-8 fade-in\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"w-16 h-16 genie-gradient rounded-full flex items-center justify-center glow-effect\">\n            <i className=\"fas fa-user-circle text-primary-foreground text-2xl\"></i>\n          </div>\n        </div>\n        <h1 className=\"text-4xl font-serif font-bold mb-4 genie-gradient bg-clip-text text-transparent\">\n          Your Profile\n        </h1>\n        <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n          Customize your MindBloom experience and make it truly yours.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Profile Overview */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"magical-border glow-effect\">\n            <CardHeader className=\"text-center\">\n              <div className=\"flex justify-center mb-4\">\n                <Avatar className=\"w-24 h-24 border-4 border-primary/20\">\n                  <AvatarImage src={user?.profileImageUrl} />\n                  <AvatarFallback className=\"genie-gradient text-primary-foreground text-2xl\">\n                    {selectedAvatar}\n                  </AvatarFallback>\n                </Avatar>\n              </div>\n              <CardTitle className=\"text-xl font-serif\">\n                {user?.firstName || user?.email?.split(\"@\")[0] || \"Wellness Seeker\"}\n              </CardTitle>\n              <div className=\"flex flex-wrap justify-center gap-2 mt-3\">\n                <Badge className=\"genie-gradient\">Community Member</Badge>\n                <Badge variant=\"outline\">Joined {new Date(user?.createdAt || Date.now()).getFullYear()}</Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center\">\n                <h4 className=\"font-medium text-sm text-muted-foreground mb-2\">Choose Your Avatar</h4>\n                <div className=\"grid grid-cols-5 gap-2\">\n                  {avatarOptions.map((avatar) => (\n                    <button\n                      key={avatar}\n                      onClick={() => setSelectedAvatar(avatar)}\n                      className={`text-2xl p-2 rounded-lg hover:bg-accent transition-colors ${\n                        selectedAvatar === avatar ? 'bg-primary/20 scale-110' : ''\n                      }`}\n                      data-testid={`avatar-${avatar}`}\n                    >\n                      {avatar}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t border-border space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Email</span>\n                  <span className=\"font-medium\">{user?.email}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Theme</span>\n                  <Badge variant=\"outline\">{theme}</Badge>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Language</span>\n                  <span className=\"font-medium\">\n                    {languages.find(l => l.code === user?.language)?.name || \"English\"}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Profile Settings */}\n        <div className=\"lg:col-span-2\">\n          <Tabs defaultValue=\"personal\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"personal\" data-testid=\"tab-personal\">Personal</TabsTrigger>\n              <TabsTrigger value=\"preferences\" data-testid=\"tab-preferences\">Preferences</TabsTrigger>\n              <TabsTrigger value=\"privacy\" data-testid=\"tab-privacy\">Privacy</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"personal\" className=\"mt-6\">\n              <Card className=\"magical-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-primary\">\n                    <i className=\"fas fa-user mr-2\"></i>\n                    Personal Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Enter your first name\" data-testid=\"first-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Enter your last name\" data-testid=\"last-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"pt-4 border-t border-border\">\n                        <Label className=\"text-sm text-muted-foreground\">\n                          Email Address (cannot be changed)\n                        </Label>\n                        <Input value={user?.email || \"\"} disabled className=\"mt-2\" />\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        disabled={updateProfileMutation.isPending}\n                        className=\"genie-gradient hover:opacity-90\"\n                        data-testid=\"save-personal\"\n                      >\n                        {updateProfileMutation.isPending ? (\n                          <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                        ) : (\n                          <i className=\"fas fa-save mr-2\"></i>\n                        )}\n                        Save Changes\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"preferences\" className=\"mt-6\">\n              <Card className=\"magical-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-primary\">\n                    <i className=\"fas fa-cog mr-2\"></i>\n                    App Preferences\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"theme\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Theme Preference</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"theme-select\">\n                                  <SelectValue placeholder=\"Select theme\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"light\">\n                                  <div className=\"flex items-center\">\n                                    <i className=\"fas fa-sun mr-2\"></i>\n                                    Light Mode\n                                  </div>\n                                </SelectItem>\n                                <SelectItem value=\"dark\">\n                                  <div className=\"flex items-center\">\n                                    <i className=\"fas fa-moon mr-2\"></i>\n                                    Dark Mode\n                                  </div>\n                                </SelectItem>\n                                <SelectItem value=\"system\">\n                                  <div className=\"flex items-center\">\n                                    <i className=\"fas fa-desktop mr-2\"></i>\n                                    System Default\n                                  </div>\n                                </SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"language\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Language</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"language-select\">\n                                  <SelectValue placeholder=\"Select language\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {languages.map((lang) => (\n                                  <SelectItem key={lang.code} value={lang.code}>\n                                    {lang.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button\n                        type=\"submit\"\n                        disabled={updateProfileMutation.isPending}\n                        className=\"genie-gradient hover:opacity-90\"\n                        data-testid=\"save-preferences\"\n                      >\n                        {updateProfileMutation.isPending ? (\n                          <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                        ) : (\n                          <i className=\"fas fa-save mr-2\"></i>\n                        )}\n                        Save Preferences\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"privacy\" className=\"mt-6\">\n              <Card className=\"magical-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-primary\">\n                    <i className=\"fas fa-shield-alt mr-2\"></i>\n                    Privacy & Security\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">Data Export</h4>\n                        <p className=\"text-sm text-muted-foreground\">Download all your data</p>\n                      </div>\n                      <Button variant=\"outline\" data-testid=\"export-data\">\n                        <i className=\"fas fa-download mr-2\"></i>\n                        Export\n                      </Button>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">Community Visibility</h4>\n                        <p className=\"text-sm text-muted-foreground\">Control how others see your profile</p>\n                      </div>\n                      <Select defaultValue=\"public\">\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"public\">Public</SelectItem>\n                          <SelectItem value=\"limited\">Limited</SelectItem>\n                          <SelectItem value=\"private\">Private</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">AI Data Usage</h4>\n                        <p className=\"text-sm text-muted-foreground\">Allow AI to learn from your interactions</p>\n                      </div>\n                      <Button variant=\"outline\">\n                        <i className=\"fas fa-toggle-on mr-2 text-primary\"></i>\n                        Enabled\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"pt-6 border-t border-destructive/20\">\n                    <h4 className=\"font-medium text-destructive mb-4 flex items-center\">\n                      <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n                      Danger Zone\n                    </h4>\n                    <div className=\"space-y-3\">\n                      <Button\n                        variant=\"outline\"\n                        className=\"w-full justify-start border-destructive/50 text-destructive hover:bg-destructive hover:text-destructive-foreground\"\n                        data-testid=\"delete-account\"\n                      >\n                        <i className=\"fas fa-user-times mr-2\"></i>\n                        Delete Account\n                      </Button>\n                      <p className=\"text-xs text-muted-foreground\">\n                        This action cannot be undone. All your data will be permanently deleted.\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"pt-4 border-t border-border\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      asChild\n                      data-testid=\"logout\"\n                    >\n                      <a href=\"/api/logout\">\n                        <i className=\"fas fa-sign-out-alt mr-2\"></i>\n                        Sign Out\n                      </a>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20639},"client/src/pages/shopping.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function Shopping() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Mock data - in a real app, this would come from your backend\n  const shoppingItems = {\n    comfort: [\n      { id: 1, name: \"Cozy Weighted Blanket\", price: \"$49.99\", category: \"Home\", description: \"Soft, calming weighted blanket for better sleep and anxiety relief\", image: \"🛏️\", link: \"https://amazon.com/weighted-blanket\", rating: 4.8 },\n      { id: 2, name: \"Aromatherapy Essential Oil Set\", price: \"$29.99\", category: \"Wellness\", description: \"Lavender, eucalyptus, and chamomile oils for relaxation\", image: \"🌿\", link: \"https://amazon.com/essential-oils\", rating: 4.7 },\n      { id: 3, name: \"Meditation Cushion\", price: \"$34.99\", category: \"Wellness\", description: \"Comfortable cushion for meditation and mindfulness practice\", image: \"🧘\", link: \"https://amazon.com/meditation-cushion\", rating: 4.6 },\n      { id: 4, name: \"Self-Care Tea Collection\", price: \"$24.99\", category: \"Food & Drink\", description: \"Herbal teas for relaxation, focus, and wellness\", image: \"🍵\", link: \"https://amazon.com/wellness-tea\", rating: 4.5 },\n    ],\n    clothing: [\n      { id: 5, name: \"Soft Comfort Hoodie\", price: \"$42.99\", category: \"Clothing\", description: \"Ultra-soft, cozy hoodie perfect for relaxing days\", image: \"👕\", link: \"https://amazon.com/comfort-hoodie\", rating: 4.9 },\n      { id: 6, name: \"Mindfulness T-Shirt\", price: \"$19.99\", category: \"Clothing\", description: \"Inspirational message tee to spread positive vibes\", image: \"👔\", link: \"https://amazon.com/mindfulness-tshirt\", rating: 4.4 },\n      { id: 7, name: \"Cozy Pajama Set\", price: \"$38.99\", category: \"Clothing\", description: \"Breathable, soft pajamas for restful sleep\", image: \"🩱\", link: \"https://amazon.com/pajama-set\", rating: 4.7 },\n      { id: 8, name: \"Wellness Socks\", price: \"$14.99\", category: \"Clothing\", description: \"Compression socks with positive affirmations\", image: \"🧦\", link: \"https://amazon.com/wellness-socks\", rating: 4.3 },\n    ],\n    accessories: [\n      { id: 9, name: \"Gratitude Journal\", price: \"$16.99\", category: \"Accessories\", description: \"Beautiful journal for daily gratitude practice\", image: \"📖\", link: \"https://amazon.com/gratitude-journal\", rating: 4.8 },\n      { id: 10, name: \"Crystal Healing Set\", price: \"$27.99\", category: \"Accessories\", description: \"Amethyst, rose quartz, and clear quartz crystals\", image: \"💎\", link: \"https://amazon.com/crystal-set\", rating: 4.6 },\n      { id: 11, name: \"Mindful Water Bottle\", price: \"$22.99\", category: \"Accessories\", description: \"Motivational water bottle with time markers\", image: \"💧\", link: \"https://amazon.com/mindful-bottle\", rating: 4.5 },\n      { id: 12, name: \"Zen Garden Kit\", price: \"$31.99\", category: \"Accessories\", description: \"Desktop zen garden for stress relief and focus\", image: \"🏞️\", link: \"https://amazon.com/zen-garden\", rating: 4.7 },\n    ],\n  };\n\n  const allItems = [...shoppingItems.comfort, ...shoppingItems.clothing, ...shoppingItems.accessories];\n  \n  const filteredItems = (items: any[]) => {\n    if (!searchQuery) return items;\n    return items.filter(item =>\n      item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.category.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  };\n\n  const getRandomItems = (items: any[], count: number) => {\n    const shuffled = [...items].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n      {/* Header */}\n      <div className=\"text-center mb-8 fade-in\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"w-16 h-16 genie-gradient rounded-full flex items-center justify-center glow-effect\">\n            <i className=\"fas fa-shopping-bag text-primary-foreground text-2xl\"></i>\n          </div>\n        </div>\n        <h1 className=\"text-4xl font-serif font-bold mb-4 genie-gradient bg-clip-text text-transparent\">\n          Comfort Shopping\n        </h1>\n        <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n          Treat yourself to comforting items that support your wellness journey. Sometimes a little retail therapy can brighten your day! ✨\n        </p>\n      </div>\n\n      {/* Disclaimer */}\n      <Card className=\"magical-border bg-primary/5 mb-8 fade-in\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-3 text-center\">\n            <i className=\"fas fa-info-circle text-primary text-xl\"></i>\n            <p className=\"text-sm text-muted-foreground\">\n              <strong>Self-Care Reminder:</strong> Shopping can be therapeutic, but remember that true happiness comes from within. \n              These items are suggestions for comfort and wellness, not necessities for your healing journey.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Search */}\n      <Card className=\"magical-border mb-8 fade-in\">\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n            <Input\n              placeholder=\"Search for comfort items...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-items\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Featured Deals */}\n      <Card className=\"magical-border glow-effect mb-8 fade-in\">\n        <CardHeader>\n          <CardTitle className=\"text-center text-xl font-serif text-primary flex items-center justify-center\">\n            <i className=\"fas fa-star mr-2\"></i>\n            ✨ Wellness Favorites ✨\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {getRandomItems(allItems, 4).map((item) => (\n              <div key={item.id} className=\"text-center group\">\n                <div className=\"text-4xl mb-2 group-hover:scale-110 transition-transform\">{item.image}</div>\n                <h3 className=\"font-medium text-sm mb-1 line-clamp-2\">{item.name}</h3>\n                <p className=\"text-primary font-semibold\">{item.price}</p>\n                <div className=\"flex items-center justify-center mt-1\">\n                  <div className=\"flex text-yellow-400\">\n                    {Array.from({ length: 5 }, (_, i) => (\n                      <i key={i} className={`fas fa-star text-xs ${i < Math.floor(item.rating) ? '' : 'opacity-30'}`}></i>\n                    ))}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-1\">({item.rating})</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Shopping Categories */}\n      <Tabs defaultValue=\"all\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4 mb-8\">\n          <TabsTrigger value=\"all\" data-testid=\"tab-all\">All Items</TabsTrigger>\n          <TabsTrigger value=\"comfort\" data-testid=\"tab-comfort\">Comfort</TabsTrigger>\n          <TabsTrigger value=\"clothing\" data-testid=\"tab-clothing\">Clothing</TabsTrigger>\n          <TabsTrigger value=\"accessories\" data-testid=\"tab-accessories\">Accessories</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"fade-in\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredItems(allItems).map((item) => (\n              <Card key={item.id} className=\"hover:magical-border hover:glow-effect transition-all group\" data-testid={`item-${item.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center mb-4\">\n                    <div className=\"text-5xl mb-3 group-hover:scale-110 transition-transform\">{item.image}</div>\n                    <Badge variant=\"outline\" className=\"text-xs mb-2\">{item.category}</Badge>\n                  </div>\n                  <h3 className=\"font-medium mb-2 line-clamp-2\">{item.name}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">{item.description}</p>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"text-lg font-semibold text-primary\">{item.price}</span>\n                    <div className=\"flex items-center\">\n                      <div className=\"flex text-yellow-400 mr-1\">\n                        {Array.from({ length: 5 }, (_, i) => (\n                          <i key={i} className={`fas fa-star text-xs ${i < Math.floor(item.rating) ? '' : 'opacity-30'}`}></i>\n                        ))}\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">({item.rating})</span>\n                    </div>\n                  </div>\n                  <Button \n                    className=\"w-full genie-gradient hover:opacity-90\" \n                    asChild\n                    data-testid={`buy-${item.id}`}\n                  >\n                    <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <i className=\"fas fa-shopping-cart mr-2\"></i>\n                      View on Amazon\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"comfort\" className=\"fade-in\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredItems(shoppingItems.comfort).map((item) => (\n              <Card key={item.id} className=\"hover:magical-border hover:glow-effect transition-all group\" data-testid={`comfort-${item.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center mb-4\">\n                    <div className=\"text-5xl mb-3 group-hover:scale-110 transition-transform\">{item.image}</div>\n                    <Badge className=\"bg-green-500/20 text-green-600 dark:text-green-400 text-xs mb-2\">Comfort</Badge>\n                  </div>\n                  <h3 className=\"font-medium mb-2 line-clamp-2\">{item.name}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">{item.description}</p>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"text-lg font-semibold text-primary\">{item.price}</span>\n                    <div className=\"flex items-center\">\n                      <div className=\"flex text-yellow-400 mr-1\">\n                        {Array.from({ length: 5 }, (_, i) => (\n                          <i key={i} className={`fas fa-star text-xs ${i < Math.floor(item.rating) ? '' : 'opacity-30'}`}></i>\n                        ))}\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">({item.rating})</span>\n                    </div>\n                  </div>\n                  <Button className=\"w-full genie-gradient hover:opacity-90\" asChild>\n                    <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <i className=\"fas fa-shopping-cart mr-2\"></i>\n                      View on Amazon\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"clothing\" className=\"fade-in\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredItems(shoppingItems.clothing).map((item) => (\n              <Card key={item.id} className=\"hover:magical-border hover:glow-effect transition-all group\" data-testid={`clothing-${item.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center mb-4\">\n                    <div className=\"text-5xl mb-3 group-hover:scale-110 transition-transform\">{item.image}</div>\n                    <Badge className=\"bg-blue-500/20 text-blue-600 dark:text-blue-400 text-xs mb-2\">Clothing</Badge>\n                  </div>\n                  <h3 className=\"font-medium mb-2 line-clamp-2\">{item.name}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">{item.description}</p>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"text-lg font-semibold text-primary\">{item.price}</span>\n                    <div className=\"flex items-center\">\n                      <div className=\"flex text-yellow-400 mr-1\">\n                        {Array.from({ length: 5 }, (_, i) => (\n                          <i key={i} className={`fas fa-star text-xs ${i < Math.floor(item.rating) ? '' : 'opacity-30'}`}></i>\n                        ))}\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">({item.rating})</span>\n                    </div>\n                  </div>\n                  <Button className=\"w-full genie-gradient hover:opacity-90\" asChild>\n                    <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <i className=\"fas fa-shopping-cart mr-2\"></i>\n                      View on Amazon\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"accessories\" className=\"fade-in\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredItems(shoppingItems.accessories).map((item) => (\n              <Card key={item.id} className=\"hover:magical-border hover:glow-effect transition-all group\" data-testid={`accessory-${item.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center mb-4\">\n                    <div className=\"text-5xl mb-3 group-hover:scale-110 transition-transform\">{item.image}</div>\n                    <Badge className=\"bg-purple-500/20 text-purple-600 dark:text-purple-400 text-xs mb-2\">Accessories</Badge>\n                  </div>\n                  <h3 className=\"font-medium mb-2 line-clamp-2\">{item.name}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">{item.description}</p>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"text-lg font-semibold text-primary\">{item.price}</span>\n                    <div className=\"flex items-center\">\n                      <div className=\"flex text-yellow-400 mr-1\">\n                        {Array.from({ length: 5 }, (_, i) => (\n                          <i key={i} className={`fas fa-star text-xs ${i < Math.floor(item.rating) ? '' : 'opacity-30'}`}></i>\n                        ))}\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">({item.rating})</span>\n                    </div>\n                  </div>\n                  <Button className=\"w-full genie-gradient hover:opacity-90\" asChild>\n                    <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <i className=\"fas fa-shopping-cart mr-2\"></i>\n                      View on Amazon\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Mindful Shopping Tips */}\n      <Card className=\"magical-border mt-12 fade-in\">\n        <CardHeader>\n          <CardTitle className=\"text-center text-xl font-serif text-primary\">\n            Mindful Shopping Tips\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 text-center\">\n            <div>\n              <div className=\"w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-heart text-green-600 dark:text-green-400 text-xl\"></i>\n              </div>\n              <h3 className=\"font-medium mb-2\">Buy with Intent</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Choose items that truly support your wellness and bring you joy\n              </p>\n            </div>\n            <div>\n              <div className=\"w-16 h-16 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-balance-scale text-blue-600 dark:text-blue-400 text-xl\"></i>\n              </div>\n              <h3 className=\"font-medium mb-2\">Practice Balance</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Treat shopping as occasional self-care, not regular therapy\n              </p>\n            </div>\n            <div>\n              <div className=\"w-16 h-16 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-lightbulb text-purple-600 dark:text-purple-400 text-xl\"></i>\n              </div>\n              <h3 className=\"font-medium mb-2\">Quality Over Quantity</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Invest in fewer, higher-quality items that last longer\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":18054},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/genie.tsx":{"content":"import AICompanion from \"@/components/AICompanion\";\n\nexport default function Genie() {\n  return (\n    <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-serif font-bold mb-4 genie-gradient bg-clip-text text-transparent\">\n          Ur Genie ✨\n        </h1>\n        <p className=\"text-muted-foreground text-lg\">\n          Your magical AI companion is here to support and guide you on your wellness journey\n        </p>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto\">\n        <AICompanion />\n      </div>\n    </div>\n  );\n}","size_bytes":616},"client/src/pages/snap.tsx":{"content":"import { useState, useRef, useCallback, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst filters = [\n  { id: \"none\", name: \"Original\", style: \"\" },\n  { id: \"grayscale\", name: \"B&W\", style: \"filter: grayscale(100%)\" },\n  { id: \"sepia\", name: \"Vintage\", style: \"filter: sepia(100%)\" },\n  { id: \"warm\", name: \"Warm\", style: \"filter: saturate(1.2) hue-rotate(15deg)\" },\n  { id: \"cool\", name: \"Cool\", style: \"filter: saturate(1.1) hue-rotate(-15deg)\" },\n  { id: \"bright\", name: \"Bright\", style: \"filter: brightness(1.3) contrast(1.1)\" },\n  { id: \"magical\", name: \"Magical\", style: \"filter: saturate(1.4) hue-rotate(30deg) brightness(1.1)\" },\n];\n\nexport default function Snap() {\n  const [isCamera, setIsCamera] = useState(true);\n  const [selectedFilter, setSelectedFilter] = useState(\"none\");\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const shareToCommunityMutation = useMutation({\n    mutationFn: async (data: { content: string; imageBase64: string }) => {\n      const response = await fetch(\"/api/community/posts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to share post');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Your snap has been shared with the community! ✨\",\n      });\n      setCapturedImage(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to share your snap. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const startCamera = useCallback(async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { width: 640, height: 480 },\n        audio: false,\n      });\n      setStream(mediaStream);\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n    } catch (error) {\n      toast({\n        title: \"Camera Error\",\n        description: \"Unable to access camera. Please check permissions.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [toast]);\n\n  const stopCamera = useCallback(() => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n  }, [stream]);\n\n  const capturePhoto = useCallback(() => {\n    if (videoRef.current && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const video = videoRef.current;\n      const context = canvas.getContext(\"2d\");\n      \n      if (context) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        context.drawImage(video, 0, 0);\n        \n        const imageData = canvas.toDataURL(\"image/jpeg\", 0.8);\n        setCapturedImage(imageData);\n        stopCamera();\n      }\n    }\n  }, [stopCamera]);\n\n  const handleFileSelect = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type.startsWith(\"image/\")) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setCapturedImage(e.target?.result as string);\n        setIsCamera(false);\n      };\n      reader.readAsDataURL(file);\n    }\n  }, []);\n\n  const shareToCommunity = useCallback(() => {\n    if (capturedImage) {\n      const content = \"Check out my snap! ✨📸\";\n      shareToCommunityMutation.mutate({\n        content,\n        imageBase64: capturedImage,\n      });\n    }\n  }, [capturedImage, shareToCommunityMutation]);\n\n  useEffect(() => {\n    if (isCamera) {\n      startCamera();\n    } else {\n      stopCamera();\n    }\n\n    return () => {\n      stopCamera();\n    };\n  }, [isCamera, startCamera, stopCamera]);\n\n  const currentFilter = filters.find(f => f.id === selectedFilter);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 pb-20 md:pb-8\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-serif font-bold mb-4 genie-gradient bg-clip-text text-transparent\">\n          Snap ✨📸\n        </h1>\n        <p className=\"text-muted-foreground text-lg\">\n          Capture magical moments and share them with your wellness community\n        </p>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Mode Selection */}\n        <div className=\"flex justify-center gap-4\">\n          <Button\n            variant={isCamera ? \"default\" : \"outline\"}\n            onClick={() => setIsCamera(true)}\n            className={isCamera ? \"genie-gradient\" : \"\"}\n            data-testid=\"camera-mode\"\n          >\n            <i className=\"fas fa-camera mr-2\"></i>\n            Camera\n          </Button>\n          <Button\n            variant={!isCamera ? \"default\" : \"outline\"}\n            onClick={() => {\n              setIsCamera(false);\n              fileInputRef.current?.click();\n            }}\n            className={!isCamera ? \"genie-gradient\" : \"\"}\n            data-testid=\"gallery-mode\"\n          >\n            <i className=\"fas fa-images mr-2\"></i>\n            Gallery\n          </Button>\n        </div>\n\n        {/* Camera/Image Display */}\n        <Card className=\"magical-border\">\n          <CardContent className=\"p-6\">\n            <div className=\"relative aspect-video bg-black rounded-lg overflow-hidden\">\n              {isCamera && !capturedImage && (\n                <video\n                  ref={videoRef}\n                  autoPlay\n                  playsInline\n                  muted\n                  className=\"w-full h-full object-cover\"\n                  style={{ ...(currentFilter && currentFilter.style ? { filter: currentFilter.style.split(': ')[1] } : {}) }}\n                />\n              )}\n              \n              {capturedImage && (\n                <img\n                  src={capturedImage}\n                  alt=\"Captured\"\n                  className=\"w-full h-full object-cover\"\n                  style={{ ...(currentFilter && currentFilter.style ? { filter: currentFilter.style.split(': ')[1] } : {}) }}\n                />\n              )}\n\n              {!isCamera && !capturedImage && (\n                <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                  <div className=\"text-center\">\n                    <i className=\"fas fa-image text-4xl mb-4\"></i>\n                    <p>Select an image from your gallery</p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Camera Controls */}\n            {isCamera && !capturedImage && (\n              <div className=\"flex justify-center mt-4\">\n                <Button\n                  size=\"lg\"\n                  onClick={capturePhoto}\n                  className=\"genie-gradient w-16 h-16 rounded-full\"\n                  data-testid=\"capture-photo\"\n                >\n                  <i className=\"fas fa-camera text-xl\"></i>\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <i className=\"fas fa-magic mr-2\"></i>\n              Magical Filters\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-4 md:grid-cols-7 gap-2\">\n              {filters.map((filter) => (\n                <Button\n                  key={filter.id}\n                  variant={selectedFilter === filter.id ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedFilter(filter.id)}\n                  className={`${\n                    selectedFilter === filter.id ? \"genie-gradient\" : \"\"\n                  } text-xs`}\n                  data-testid={`filter-${filter.id}`}\n                >\n                  {filter.name}\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        {capturedImage && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex justify-center gap-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setCapturedImage(null);\n                    if (isCamera) {\n                      startCamera();\n                    }\n                  }}\n                  data-testid=\"retake-photo\"\n                >\n                  <i className=\"fas fa-redo mr-2\"></i>\n                  Retake\n                </Button>\n                \n                <Button\n                  onClick={shareToCommunity}\n                  disabled={shareToCommunityMutation.isPending}\n                  className=\"genie-gradient\"\n                  data-testid=\"share-to-community\"\n                >\n                  {shareToCommunityMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Sharing...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-share mr-2\"></i>\n                      Share to Community\n                    </>\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Tips */}\n        <Card className=\"bg-muted/50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <i className=\"fas fa-lightbulb text-yellow-500 mt-1\"></i>\n              <div>\n                <h4 className=\"font-medium mb-2\">✨ Snap Tips</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>• Try different filters to enhance your wellness moments</li>\n                  <li>• Share positive vibes and supportive content with the community</li>\n                  <li>• Capture your progress, achievements, or inspiring quotes</li>\n                  <li>• Use natural lighting for the best photo quality</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileSelect}\n        className=\"hidden\"\n      />\n\n      {/* Hidden canvas for photo capture */}\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  );\n}","size_bytes":11211}},"version":1}